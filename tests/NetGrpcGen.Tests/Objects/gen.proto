syntax = "proto3";
package Tests;
import "google/protobuf/any.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/wrappers.proto";
import "types.proto";
extend google.protobuf.MethodOptions {
    // The method used to create the object.
    bool create = 1000;
    // The method used to listen for events.
    bool eventListener = 1001;
    // The method name
    string methodName = 1002;
    // Is this method sync or async?
    bool sync = 1003;
    // The name of the property.
    string propName = 1004;
    // The property setter.
    bool propSet = 1005;
    // The property getter.
    bool propGet = 1006;
}
extend google.protobuf.MessageOptions {
    // The name of the object that this message is for.
    string messageObjectName = 1000;
    // The name of the event this message is for.
    string eventName = 1001;
    // This event represents a "property changed" event for the given property.
    string forProp = 1002;
}
extend google.protobuf.ServiceOptions {
    // The name of the object that this service is for.
    string serviceObjectName = 1000;
}
message Test1ListenEventStream {
	uint64 objectId = 1;
}
message Test1CreateResponse {
	option(messageObjectName) = "Test1";
	uint64 objectId = 1;
}
message Test1StopRequest {
	option(messageObjectName) = "Test1";
}
message Test1StopResponse {
	option(messageObjectName) = "Test1";
}
message Test1PropStringSetRequest {
	uint64 objectId = 1;
	google.protobuf.StringValue value = 2;
}
message Test1PropStringSetResponse {
}
message Test1PropStringGetRequest {
	uint64 objectId = 1;
}
message Test1PropStringGetResponse {
	google.protobuf.StringValue value = 1;
}
message Test1PropStringPropertyChanged {
	option(messageObjectName) = "Test1";
	option(eventName) = "PropString";
	uint64 objectId = 1;
	google.protobuf.StringValue value = 2;
}
message Test1PropComplexSetRequest {
	uint64 objectId = 1;
	custom.types.TestMessageResponse value = 2;
}
message Test1PropComplexSetResponse {
}
message Test1PropComplexGetRequest {
	uint64 objectId = 1;
}
message Test1PropComplexGetResponse {
	custom.types.TestMessageResponse value = 1;
}
message Test1PropComplexPropertyChanged {
	option(messageObjectName) = "Test1";
	option(eventName) = "PropComplex";
	uint64 objectId = 1;
	custom.types.TestMessageResponse value = 2;
}
message Test1TestEventEvent {
	option(messageObjectName) = "Test1";
	option(eventName) = "TestEvent";
	uint64 objectId = 1;
	google.protobuf.StringValue value = 2;
}
message Test1TestEventComplexEvent {
	option(messageObjectName) = "Test1";
	option(eventName) = "TestEventComplex";
	uint64 objectId = 1;
	custom.types.TestMessageResponse value = 2;
}
message Test1TestEventNoDataEvent {
	option(messageObjectName) = "Test1";
	option(eventName) = "TestEventNoData";
	uint64 objectId = 1;
}
message Test1TestMethodMethodRequest {
	uint64 objectId = 1;
	custom.types.TestMessageRequest value = 2;
}
message Test1TestMethodMethodResponse {
	custom.types.TestMessageResponse value = 1;
}
message Test1TestMethodSyncMethodRequest {
	uint64 objectId = 1;
	custom.types.TestMessageRequest value = 2;
}
message Test1TestMethodSyncMethodResponse {
	custom.types.TestMessageResponse value = 1;
}
message Test1TestMethodWithNoResponseMethodRequest {
	uint64 objectId = 1;
	custom.types.TestMessageRequest value = 2;
}
message Test1TestMethodWithNoResponseMethodResponse {
}
message Test1TestMethodNoRequestMethodRequest {
	uint64 objectId = 1;
}
message Test1TestMethodNoRequestMethodResponse {
}
service Test1ObjectService {
	option(serviceObjectName) = "Test1";
	rpc Create (stream google.protobuf.Any) returns (stream google.protobuf.Any) {
		option(create) = true;
	}
	rpc ListenEvents (Test1ListenEventStream) returns (stream google.protobuf.Any) {
		option(eventListener) = true;
	};
	rpc InvokeTestMethod (Test1TestMethodMethodRequest) returns (Test1TestMethodMethodResponse) {
		option(methodName) = "TestMethod";
	};
	rpc InvokeTestMethodSync (Test1TestMethodSyncMethodRequest) returns (Test1TestMethodSyncMethodResponse) {
		option(methodName) = "TestMethodSync";
		option(sync) = true;
	};
	rpc InvokeTestMethodWithNoResponse (Test1TestMethodWithNoResponseMethodRequest) returns (Test1TestMethodWithNoResponseMethodResponse) {
		option(methodName) = "TestMethodWithNoResponse";
		option(sync) = true;
	};
	rpc InvokeTestMethodNoRequest (Test1TestMethodNoRequestMethodRequest) returns (Test1TestMethodNoRequestMethodResponse) {
		option(methodName) = "TestMethodNoRequest";
		option(sync) = true;
	};
	rpc SetPropertyPropString (Test1PropStringSetRequest) returns (Test1PropStringSetResponse) {
		option(propName) = "PropString";
		option(propSet) = true;
	};
	rpc GetPropertyPropString (Test1PropStringGetRequest) returns (Test1PropStringGetResponse) {
		option(propName) = "PropString";
		option(propGet) = true;
	};
	rpc SetPropertyPropComplex (Test1PropComplexSetRequest) returns (Test1PropComplexSetResponse) {
		option(propName) = "PropComplex";
		option(propSet) = true;
	};
	rpc GetPropertyPropComplex (Test1PropComplexGetRequest) returns (Test1PropComplexGetResponse) {
		option(propName) = "PropComplex";
		option(propGet) = true;
	};
}
message Test2ListenEventStream {
	uint64 objectId = 1;
}
message Test2CreateResponse {
	option(messageObjectName) = "Test2";
	uint64 objectId = 1;
}
message Test2StopRequest {
	option(messageObjectName) = "Test2";
}
message Test2StopResponse {
	option(messageObjectName) = "Test2";
}
message Test2PropString2SetRequest {
	uint64 objectId = 1;
	google.protobuf.StringValue value = 2;
}
message Test2PropString2SetResponse {
}
message Test2PropString2GetRequest {
	uint64 objectId = 1;
}
message Test2PropString2GetResponse {
	google.protobuf.StringValue value = 1;
}
message Test2PropString2PropertyChanged {
	option(messageObjectName) = "Test2";
	option(eventName) = "PropString2";
	uint64 objectId = 1;
	google.protobuf.StringValue value = 2;
}
message Test2PropComplex2SetRequest {
	uint64 objectId = 1;
	custom.types.TestMessageResponse value = 2;
}
message Test2PropComplex2SetResponse {
}
message Test2PropComplex2GetRequest {
	uint64 objectId = 1;
}
message Test2PropComplex2GetResponse {
	custom.types.TestMessageResponse value = 1;
}
message Test2PropComplex2PropertyChanged {
	option(messageObjectName) = "Test2";
	option(eventName) = "PropComplex2";
	uint64 objectId = 1;
	custom.types.TestMessageResponse value = 2;
}
message Test2TestEvent2Event {
	option(messageObjectName) = "Test2";
	option(eventName) = "TestEvent2";
	uint64 objectId = 1;
	google.protobuf.StringValue value = 2;
}
message Test2TestEventComplex2Event {
	option(messageObjectName) = "Test2";
	option(eventName) = "TestEventComplex2";
	uint64 objectId = 1;
	custom.types.TestMessageResponse value = 2;
}
message Test2TestEventNoData2Event {
	option(messageObjectName) = "Test2";
	option(eventName) = "TestEventNoData2";
	uint64 objectId = 1;
}
message Test2TestMethod2MethodRequest {
	uint64 objectId = 1;
	custom.types.TestMessageRequest value = 2;
}
message Test2TestMethod2MethodResponse {
	custom.types.TestMessageResponse value = 1;
}
message Test2TestMethodSync2MethodRequest {
	uint64 objectId = 1;
	custom.types.TestMessageRequest value = 2;
}
message Test2TestMethodSync2MethodResponse {
	custom.types.TestMessageResponse value = 1;
}
message Test2TestMethodWithNoResponse2MethodRequest {
	uint64 objectId = 1;
	custom.types.TestMessageRequest value = 2;
}
message Test2TestMethodWithNoResponse2MethodResponse {
}
message Test2TestMethodNoRequest2MethodRequest {
	uint64 objectId = 1;
}
message Test2TestMethodNoRequest2MethodResponse {
}
service Test2ObjectService {
	option(serviceObjectName) = "Test2";
	rpc Create (stream google.protobuf.Any) returns (stream google.protobuf.Any) {
		option(create) = true;
	}
	rpc ListenEvents (Test2ListenEventStream) returns (stream google.protobuf.Any) {
		option(eventListener) = true;
	};
	rpc InvokeTestMethod2 (Test2TestMethod2MethodRequest) returns (Test2TestMethod2MethodResponse) {
		option(methodName) = "TestMethod2";
	};
	rpc InvokeTestMethodSync2 (Test2TestMethodSync2MethodRequest) returns (Test2TestMethodSync2MethodResponse) {
		option(methodName) = "TestMethodSync2";
		option(sync) = true;
	};
	rpc InvokeTestMethodWithNoResponse2 (Test2TestMethodWithNoResponse2MethodRequest) returns (Test2TestMethodWithNoResponse2MethodResponse) {
		option(methodName) = "TestMethodWithNoResponse2";
		option(sync) = true;
	};
	rpc InvokeTestMethodNoRequest2 (Test2TestMethodNoRequest2MethodRequest) returns (Test2TestMethodNoRequest2MethodResponse) {
		option(methodName) = "TestMethodNoRequest2";
		option(sync) = true;
	};
	rpc SetPropertyPropString2 (Test2PropString2SetRequest) returns (Test2PropString2SetResponse) {
		option(propName) = "PropString2";
		option(propSet) = true;
	};
	rpc GetPropertyPropString2 (Test2PropString2GetRequest) returns (Test2PropString2GetResponse) {
		option(propName) = "PropString2";
		option(propGet) = true;
	};
	rpc SetPropertyPropComplex2 (Test2PropComplex2SetRequest) returns (Test2PropComplex2SetResponse) {
		option(propName) = "PropComplex2";
		option(propSet) = true;
	};
	rpc GetPropertyPropComplex2 (Test2PropComplex2GetRequest) returns (Test2PropComplex2GetResponse) {
		option(propName) = "PropComplex2";
		option(propGet) = true;
	};
}
