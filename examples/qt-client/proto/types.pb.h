// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_types_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_types_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_types_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_types_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_types_2eproto;
namespace custom {
namespace types {
class TestMessageRequest;
class TestMessageRequestDefaultTypeInternal;
extern TestMessageRequestDefaultTypeInternal _TestMessageRequest_default_instance_;
class TestMessageResponse;
class TestMessageResponseDefaultTypeInternal;
extern TestMessageResponseDefaultTypeInternal _TestMessageResponse_default_instance_;
}  // namespace types
}  // namespace custom
PROTOBUF_NAMESPACE_OPEN
template<> ::custom::types::TestMessageRequest* Arena::CreateMaybeMessage<::custom::types::TestMessageRequest>(Arena*);
template<> ::custom::types::TestMessageResponse* Arena::CreateMaybeMessage<::custom::types::TestMessageResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace custom {
namespace types {

// ===================================================================

class TestMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:custom.types.TestMessageRequest) */ {
 public:
  TestMessageRequest();
  virtual ~TestMessageRequest();

  TestMessageRequest(const TestMessageRequest& from);
  TestMessageRequest(TestMessageRequest&& from) noexcept
    : TestMessageRequest() {
    *this = ::std::move(from);
  }

  inline TestMessageRequest& operator=(const TestMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessageRequest& operator=(TestMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestMessageRequest* internal_default_instance() {
    return reinterpret_cast<const TestMessageRequest*>(
               &_TestMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestMessageRequest& a, TestMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestMessageRequest* New() const final {
    return CreateMaybeMessage<TestMessageRequest>(nullptr);
  }

  TestMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestMessageRequest& from);
  void MergeFrom(const TestMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "custom.types.TestMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValue2FieldNumber = 3,
    kValue1FieldNumber = 2,
  };
  // string value2 = 3;
  void clear_value2();
  const std::string& value2() const;
  void set_value2(const std::string& value);
  void set_value2(std::string&& value);
  void set_value2(const char* value);
  void set_value2(const char* value, size_t size);
  std::string* mutable_value2();
  std::string* release_value2();
  void set_allocated_value2(std::string* value2);
  private:
  const std::string& _internal_value2() const;
  void _internal_set_value2(const std::string& value);
  std::string* _internal_mutable_value2();
  public:

  // uint64 value1 = 2;
  void clear_value1();
  ::PROTOBUF_NAMESPACE_ID::uint64 value1() const;
  void set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value1() const;
  void _internal_set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:custom.types.TestMessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class TestMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:custom.types.TestMessageResponse) */ {
 public:
  TestMessageResponse();
  virtual ~TestMessageResponse();

  TestMessageResponse(const TestMessageResponse& from);
  TestMessageResponse(TestMessageResponse&& from) noexcept
    : TestMessageResponse() {
    *this = ::std::move(from);
  }

  inline TestMessageResponse& operator=(const TestMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessageResponse& operator=(TestMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestMessageResponse* internal_default_instance() {
    return reinterpret_cast<const TestMessageResponse*>(
               &_TestMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestMessageResponse& a, TestMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestMessageResponse* New() const final {
    return CreateMaybeMessage<TestMessageResponse>(nullptr);
  }

  TestMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestMessageResponse& from);
  void MergeFrom(const TestMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "custom.types.TestMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValue2FieldNumber = 2,
    kValue1FieldNumber = 1,
  };
  // string value2 = 2;
  void clear_value2();
  const std::string& value2() const;
  void set_value2(const std::string& value);
  void set_value2(std::string&& value);
  void set_value2(const char* value);
  void set_value2(const char* value, size_t size);
  std::string* mutable_value2();
  std::string* release_value2();
  void set_allocated_value2(std::string* value2);
  private:
  const std::string& _internal_value2() const;
  void _internal_set_value2(const std::string& value);
  std::string* _internal_mutable_value2();
  public:

  // uint64 value1 = 1;
  void clear_value1();
  ::PROTOBUF_NAMESPACE_ID::uint64 value1() const;
  void set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value1() const;
  void _internal_set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:custom.types.TestMessageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// ===================================================================

static const int kCreateFieldNumber = 234234;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  create;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestMessageRequest

// uint64 value1 = 2;
inline void TestMessageRequest::clear_value1() {
  value1_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestMessageRequest::_internal_value1() const {
  return value1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestMessageRequest::value1() const {
  // @@protoc_insertion_point(field_get:custom.types.TestMessageRequest.value1)
  return _internal_value1();
}
inline void TestMessageRequest::_internal_set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value1_ = value;
}
inline void TestMessageRequest::set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value1(value);
  // @@protoc_insertion_point(field_set:custom.types.TestMessageRequest.value1)
}

// string value2 = 3;
inline void TestMessageRequest::clear_value2() {
  value2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TestMessageRequest::value2() const {
  // @@protoc_insertion_point(field_get:custom.types.TestMessageRequest.value2)
  return _internal_value2();
}
inline void TestMessageRequest::set_value2(const std::string& value) {
  _internal_set_value2(value);
  // @@protoc_insertion_point(field_set:custom.types.TestMessageRequest.value2)
}
inline std::string* TestMessageRequest::mutable_value2() {
  // @@protoc_insertion_point(field_mutable:custom.types.TestMessageRequest.value2)
  return _internal_mutable_value2();
}
inline const std::string& TestMessageRequest::_internal_value2() const {
  return value2_.GetNoArena();
}
inline void TestMessageRequest::_internal_set_value2(const std::string& value) {
  
  value2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TestMessageRequest::set_value2(std::string&& value) {
  
  value2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:custom.types.TestMessageRequest.value2)
}
inline void TestMessageRequest::set_value2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:custom.types.TestMessageRequest.value2)
}
inline void TestMessageRequest::set_value2(const char* value, size_t size) {
  
  value2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:custom.types.TestMessageRequest.value2)
}
inline std::string* TestMessageRequest::_internal_mutable_value2() {
  
  return value2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestMessageRequest::release_value2() {
  // @@protoc_insertion_point(field_release:custom.types.TestMessageRequest.value2)
  
  return value2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestMessageRequest::set_allocated_value2(std::string* value2) {
  if (value2 != nullptr) {
    
  } else {
    
  }
  value2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value2);
  // @@protoc_insertion_point(field_set_allocated:custom.types.TestMessageRequest.value2)
}

// -------------------------------------------------------------------

// TestMessageResponse

// uint64 value1 = 1;
inline void TestMessageResponse::clear_value1() {
  value1_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestMessageResponse::_internal_value1() const {
  return value1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestMessageResponse::value1() const {
  // @@protoc_insertion_point(field_get:custom.types.TestMessageResponse.value1)
  return _internal_value1();
}
inline void TestMessageResponse::_internal_set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value1_ = value;
}
inline void TestMessageResponse::set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value1(value);
  // @@protoc_insertion_point(field_set:custom.types.TestMessageResponse.value1)
}

// string value2 = 2;
inline void TestMessageResponse::clear_value2() {
  value2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TestMessageResponse::value2() const {
  // @@protoc_insertion_point(field_get:custom.types.TestMessageResponse.value2)
  return _internal_value2();
}
inline void TestMessageResponse::set_value2(const std::string& value) {
  _internal_set_value2(value);
  // @@protoc_insertion_point(field_set:custom.types.TestMessageResponse.value2)
}
inline std::string* TestMessageResponse::mutable_value2() {
  // @@protoc_insertion_point(field_mutable:custom.types.TestMessageResponse.value2)
  return _internal_mutable_value2();
}
inline const std::string& TestMessageResponse::_internal_value2() const {
  return value2_.GetNoArena();
}
inline void TestMessageResponse::_internal_set_value2(const std::string& value) {
  
  value2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TestMessageResponse::set_value2(std::string&& value) {
  
  value2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:custom.types.TestMessageResponse.value2)
}
inline void TestMessageResponse::set_value2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:custom.types.TestMessageResponse.value2)
}
inline void TestMessageResponse::set_value2(const char* value, size_t size) {
  
  value2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:custom.types.TestMessageResponse.value2)
}
inline std::string* TestMessageResponse::_internal_mutable_value2() {
  
  return value2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestMessageResponse::release_value2() {
  // @@protoc_insertion_point(field_release:custom.types.TestMessageResponse.value2)
  
  return value2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestMessageResponse::set_allocated_value2(std::string* value2) {
  if (value2 != nullptr) {
    
  } else {
    
  }
  value2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value2);
  // @@protoc_insertion_point(field_set_allocated:custom.types.TestMessageResponse.value2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace custom

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_types_2eproto
