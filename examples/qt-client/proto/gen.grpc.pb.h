// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gen.proto
#ifndef GRPC_gen_2eproto__INCLUDED
#define GRPC_gen_2eproto__INCLUDED

#include "gen.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Tests {

class Test1ObjectService final {
 public:
  static constexpr char const* service_full_name() {
    return "Tests.Test1ObjectService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>> Create(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>>(CreateRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>> AsyncCreate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>>(AsyncCreateRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>> PrepareAsyncCreate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>>(PrepareAsyncCreateRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::google::protobuf::Any>> ListenEvents(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::google::protobuf::Any>>(ListenEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>> AsyncListenEvents(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>>(AsyncListenEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>> PrepareAsyncListenEvents(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>>(PrepareAsyncListenEventsRaw(context, request, cq));
    }
    virtual ::grpc::Status TestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::Tests::Test1TestMethodMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodMethodResponse>> AsyncTestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodMethodResponse>>(AsyncTestMethodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodMethodResponse>> PrepareAsyncTestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodMethodResponse>>(PrepareAsyncTestMethodRaw(context, request, cq));
    }
    virtual ::grpc::Status TestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::Tests::Test1TestMethodSyncMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodSyncMethodResponse>> AsyncTestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodSyncMethodResponse>>(AsyncTestMethodSyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodSyncMethodResponse>> PrepareAsyncTestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodSyncMethodResponse>>(PrepareAsyncTestMethodSyncRaw(context, request, cq));
    }
    virtual ::grpc::Status TestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodWithNoResponseMethodResponse>> AsyncTestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodWithNoResponseMethodResponse>>(AsyncTestMethodWithNoResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodWithNoResponseMethodResponse>> PrepareAsyncTestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodWithNoResponseMethodResponse>>(PrepareAsyncTestMethodWithNoResponseRaw(context, request, cq));
    }
    virtual ::grpc::Status TestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::Tests::Test1TestMethodNoRequestMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoRequestMethodResponse>> AsyncTestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoRequestMethodResponse>>(AsyncTestMethodNoRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoRequestMethodResponse>> PrepareAsyncTestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoRequestMethodResponse>>(PrepareAsyncTestMethodNoRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status SetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::Tests::Test1PropStringSetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringSetResponse>> AsyncSetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringSetResponse>>(AsyncSetPropertyPropStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringSetResponse>> PrepareAsyncSetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringSetResponse>>(PrepareAsyncSetPropertyPropStringRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::Tests::Test1PropStringGetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringGetResponse>> AsyncGetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringGetResponse>>(AsyncGetPropertyPropStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringGetResponse>> PrepareAsyncGetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringGetResponse>>(PrepareAsyncGetPropertyPropStringRaw(context, request, cq));
    }
    virtual ::grpc::Status SetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::Tests::Test1PropComplexSetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexSetResponse>> AsyncSetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexSetResponse>>(AsyncSetPropertyPropComplexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexSetResponse>> PrepareAsyncSetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexSetResponse>>(PrepareAsyncSetPropertyPropComplexRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::Tests::Test1PropComplexGetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexGetResponse>> AsyncGetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexGetResponse>>(AsyncGetPropertyPropComplexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexGetResponse>> PrepareAsyncGetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexGetResponse>>(PrepareAsyncGetPropertyPropComplexRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Create(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::google::protobuf::Any,::google::protobuf::Any>* reactor) = 0;
      #else
      virtual void Create(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::google::protobuf::Any,::google::protobuf::Any>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListenEvents(::grpc::ClientContext* context, ::Tests::Test1ListenEventStream* request, ::grpc::ClientReadReactor< ::google::protobuf::Any>* reactor) = 0;
      #else
      virtual void ListenEvents(::grpc::ClientContext* context, ::Tests::Test1ListenEventStream* request, ::grpc::experimental::ClientReadReactor< ::google::protobuf::Any>* reactor) = 0;
      #endif
      virtual void TestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest* request, ::Tests::Test1TestMethodMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TestMethod(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest* request, ::Tests::Test1TestMethodMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest* request, ::Tests::Test1TestMethodMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TestMethod(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TestMethod(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void TestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest* request, ::Tests::Test1TestMethodSyncMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TestMethodSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodSyncMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest* request, ::Tests::Test1TestMethodSyncMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest* request, ::Tests::Test1TestMethodSyncMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TestMethodSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodSyncMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TestMethodSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodSyncMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void TestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TestMethodWithNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TestMethodWithNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TestMethodWithNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void TestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TestMethodNoRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TestMethodNoRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TestMethodNoRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest* request, ::Tests::Test1PropStringSetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringSetResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest* request, ::Tests::Test1PropStringSetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest* request, ::Tests::Test1PropStringSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringSetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest* request, ::Tests::Test1PropStringGetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringGetResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest* request, ::Tests::Test1PropStringGetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest* request, ::Tests::Test1PropStringGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringGetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest* request, ::Tests::Test1PropComplexSetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexSetResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest* request, ::Tests::Test1PropComplexSetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest* request, ::Tests::Test1PropComplexSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexSetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest* request, ::Tests::Test1PropComplexGetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexGetResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest* request, ::Tests::Test1PropComplexGetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest* request, ::Tests::Test1PropComplexGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexGetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>* CreateRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>* AsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::google::protobuf::Any>* ListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>* AsyncListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>* PrepareAsyncListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodMethodResponse>* AsyncTestMethodRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodMethodResponse>* PrepareAsyncTestMethodRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodSyncMethodResponse>* AsyncTestMethodSyncRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodSyncMethodResponse>* PrepareAsyncTestMethodSyncRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodWithNoResponseMethodResponse>* AsyncTestMethodWithNoResponseRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodWithNoResponseMethodResponse>* PrepareAsyncTestMethodWithNoResponseRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoRequestMethodResponse>* AsyncTestMethodNoRequestRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoRequestMethodResponse>* PrepareAsyncTestMethodNoRequestRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringSetResponse>* AsyncSetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringSetResponse>* PrepareAsyncSetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringGetResponse>* AsyncGetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringGetResponse>* PrepareAsyncGetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexSetResponse>* AsyncSetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexSetResponse>* PrepareAsyncSetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexGetResponse>* AsyncGetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexGetResponse>* PrepareAsyncGetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>> Create(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>>(CreateRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>> AsyncCreate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>>(AsyncCreateRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>> PrepareAsyncCreate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>>(PrepareAsyncCreateRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::google::protobuf::Any>> ListenEvents(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::google::protobuf::Any>>(ListenEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>> AsyncListenEvents(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>>(AsyncListenEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>> PrepareAsyncListenEvents(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>>(PrepareAsyncListenEventsRaw(context, request, cq));
    }
    ::grpc::Status TestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::Tests::Test1TestMethodMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodMethodResponse>> AsyncTestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodMethodResponse>>(AsyncTestMethodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodMethodResponse>> PrepareAsyncTestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodMethodResponse>>(PrepareAsyncTestMethodRaw(context, request, cq));
    }
    ::grpc::Status TestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::Tests::Test1TestMethodSyncMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodSyncMethodResponse>> AsyncTestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodSyncMethodResponse>>(AsyncTestMethodSyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodSyncMethodResponse>> PrepareAsyncTestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodSyncMethodResponse>>(PrepareAsyncTestMethodSyncRaw(context, request, cq));
    }
    ::grpc::Status TestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodWithNoResponseMethodResponse>> AsyncTestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodWithNoResponseMethodResponse>>(AsyncTestMethodWithNoResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodWithNoResponseMethodResponse>> PrepareAsyncTestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodWithNoResponseMethodResponse>>(PrepareAsyncTestMethodWithNoResponseRaw(context, request, cq));
    }
    ::grpc::Status TestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::Tests::Test1TestMethodNoRequestMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestMethodResponse>> AsyncTestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestMethodResponse>>(AsyncTestMethodNoRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestMethodResponse>> PrepareAsyncTestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestMethodResponse>>(PrepareAsyncTestMethodNoRequestRaw(context, request, cq));
    }
    ::grpc::Status SetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::Tests::Test1PropStringSetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringSetResponse>> AsyncSetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringSetResponse>>(AsyncSetPropertyPropStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringSetResponse>> PrepareAsyncSetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringSetResponse>>(PrepareAsyncSetPropertyPropStringRaw(context, request, cq));
    }
    ::grpc::Status GetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::Tests::Test1PropStringGetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringGetResponse>> AsyncGetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringGetResponse>>(AsyncGetPropertyPropStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringGetResponse>> PrepareAsyncGetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringGetResponse>>(PrepareAsyncGetPropertyPropStringRaw(context, request, cq));
    }
    ::grpc::Status SetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::Tests::Test1PropComplexSetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexSetResponse>> AsyncSetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexSetResponse>>(AsyncSetPropertyPropComplexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexSetResponse>> PrepareAsyncSetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexSetResponse>>(PrepareAsyncSetPropertyPropComplexRaw(context, request, cq));
    }
    ::grpc::Status GetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::Tests::Test1PropComplexGetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexGetResponse>> AsyncGetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexGetResponse>>(AsyncGetPropertyPropComplexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexGetResponse>> PrepareAsyncGetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexGetResponse>>(PrepareAsyncGetPropertyPropComplexRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Create(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::google::protobuf::Any,::google::protobuf::Any>* reactor) override;
      #else
      void Create(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::google::protobuf::Any,::google::protobuf::Any>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListenEvents(::grpc::ClientContext* context, ::Tests::Test1ListenEventStream* request, ::grpc::ClientReadReactor< ::google::protobuf::Any>* reactor) override;
      #else
      void ListenEvents(::grpc::ClientContext* context, ::Tests::Test1ListenEventStream* request, ::grpc::experimental::ClientReadReactor< ::google::protobuf::Any>* reactor) override;
      #endif
      void TestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest* request, ::Tests::Test1TestMethodMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void TestMethod(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest* request, ::Tests::Test1TestMethodMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest* request, ::Tests::Test1TestMethodMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TestMethod(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TestMethod(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void TestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest* request, ::Tests::Test1TestMethodSyncMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void TestMethodSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodSyncMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest* request, ::Tests::Test1TestMethodSyncMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest* request, ::Tests::Test1TestMethodSyncMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TestMethodSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodSyncMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TestMethodSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodSyncMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void TestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void TestMethodWithNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TestMethodWithNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TestMethodWithNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void TestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void TestMethodNoRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TestMethodNoRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TestMethodNoRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest* request, ::Tests::Test1PropStringSetResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringSetResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest* request, ::Tests::Test1PropStringSetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest* request, ::Tests::Test1PropStringSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringSetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest* request, ::Tests::Test1PropStringGetResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringGetResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest* request, ::Tests::Test1PropStringGetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest* request, ::Tests::Test1PropStringGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringGetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest* request, ::Tests::Test1PropComplexSetResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexSetResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest* request, ::Tests::Test1PropComplexSetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest* request, ::Tests::Test1PropComplexSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexSetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest* request, ::Tests::Test1PropComplexGetResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexGetResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest* request, ::Tests::Test1PropComplexGetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest* request, ::Tests::Test1PropComplexGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexGetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* CreateRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* AsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::google::protobuf::Any>* ListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request) override;
    ::grpc::ClientAsyncReader< ::google::protobuf::Any>* AsyncListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::google::protobuf::Any>* PrepareAsyncListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodMethodResponse>* AsyncTestMethodRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodMethodResponse>* PrepareAsyncTestMethodRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodSyncMethodResponse>* AsyncTestMethodSyncRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodSyncMethodResponse>* PrepareAsyncTestMethodSyncRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodWithNoResponseMethodResponse>* AsyncTestMethodWithNoResponseRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodWithNoResponseMethodResponse>* PrepareAsyncTestMethodWithNoResponseRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestMethodResponse>* AsyncTestMethodNoRequestRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestMethodResponse>* PrepareAsyncTestMethodNoRequestRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringSetResponse>* AsyncSetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringSetResponse>* PrepareAsyncSetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringGetResponse>* AsyncGetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringGetResponse>* PrepareAsyncGetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexSetResponse>* AsyncSetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexSetResponse>* PrepareAsyncSetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexGetResponse>* AsyncGetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexGetResponse>* PrepareAsyncGetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_ListenEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_TestMethod_;
    const ::grpc::internal::RpcMethod rpcmethod_TestMethodSync_;
    const ::grpc::internal::RpcMethod rpcmethod_TestMethodWithNoResponse_;
    const ::grpc::internal::RpcMethod rpcmethod_TestMethodNoRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPropertyPropString_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPropertyPropString_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPropertyPropComplex_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPropertyPropComplex_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Create(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* stream);
    virtual ::grpc::Status ListenEvents(::grpc::ServerContext* context, const ::Tests::Test1ListenEventStream* request, ::grpc::ServerWriter< ::google::protobuf::Any>* writer);
    virtual ::grpc::Status TestMethod(::grpc::ServerContext* context, const ::Tests::Test1TestMethodMethodRequest* request, ::Tests::Test1TestMethodMethodResponse* response);
    virtual ::grpc::Status TestMethodSync(::grpc::ServerContext* context, const ::Tests::Test1TestMethodSyncMethodRequest* request, ::Tests::Test1TestMethodSyncMethodResponse* response);
    virtual ::grpc::Status TestMethodWithNoResponse(::grpc::ServerContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response);
    virtual ::grpc::Status TestMethodNoRequest(::grpc::ServerContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response);
    virtual ::grpc::Status SetPropertyPropString(::grpc::ServerContext* context, const ::Tests::Test1PropStringSetRequest* request, ::Tests::Test1PropStringSetResponse* response);
    virtual ::grpc::Status GetPropertyPropString(::grpc::ServerContext* context, const ::Tests::Test1PropStringGetRequest* request, ::Tests::Test1PropStringGetResponse* response);
    virtual ::grpc::Status SetPropertyPropComplex(::grpc::ServerContext* context, const ::Tests::Test1PropComplexSetRequest* request, ::Tests::Test1PropComplexSetResponse* response);
    virtual ::grpc::Status GetPropertyPropComplex(::grpc::ServerContext* context, const ::Tests::Test1PropComplexGetRequest* request, ::Tests::Test1PropComplexGetResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListenEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListenEvents() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListenEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenEvents(::grpc::ServerContext* /*context*/, const ::Tests::Test1ListenEventStream* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListenEvents(::grpc::ServerContext* context, ::Tests::Test1ListenEventStream* request, ::grpc::ServerAsyncWriter< ::google::protobuf::Any>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TestMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TestMethod() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_TestMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethod(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodMethodRequest* /*request*/, ::Tests::Test1TestMethodMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestMethod(::grpc::ServerContext* context, ::Tests::Test1TestMethodMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test1TestMethodMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TestMethodSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TestMethodSync() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_TestMethodSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethodSync(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodSyncMethodRequest* /*request*/, ::Tests::Test1TestMethodSyncMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestMethodSync(::grpc::ServerContext* context, ::Tests::Test1TestMethodSyncMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test1TestMethodSyncMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TestMethodWithNoResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TestMethodWithNoResponse() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_TestMethodWithNoResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethodWithNoResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodWithNoResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestMethodWithNoResponse(::grpc::ServerContext* context, ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test1TestMethodWithNoResponseMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TestMethodNoRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TestMethodNoRequest() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_TestMethodNoRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethodNoRequest(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestMethodNoRequest(::grpc::ServerContext* context, ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test1TestMethodNoRequestMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPropertyPropString() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringSetRequest* /*request*/, ::Tests::Test1PropStringSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPropertyPropString(::grpc::ServerContext* context, ::Tests::Test1PropStringSetRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test1PropStringSetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPropertyPropString() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringGetRequest* /*request*/, ::Tests::Test1PropStringGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPropertyPropString(::grpc::ServerContext* context, ::Tests::Test1PropStringGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test1PropStringGetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPropertyPropComplex() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexSetRequest* /*request*/, ::Tests::Test1PropComplexSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPropertyPropComplex(::grpc::ServerContext* context, ::Tests::Test1PropComplexSetRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test1PropComplexSetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPropertyPropComplex() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexGetRequest* /*request*/, ::Tests::Test1PropComplexGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPropertyPropComplex(::grpc::ServerContext* context, ::Tests::Test1PropComplexGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test1PropComplexGetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_ListenEvents<WithAsyncMethod_TestMethod<WithAsyncMethod_TestMethodSync<WithAsyncMethod_TestMethodWithNoResponse<WithAsyncMethod_TestMethodNoRequest<WithAsyncMethod_SetPropertyPropString<WithAsyncMethod_GetPropertyPropString<WithAsyncMethod_SetPropertyPropComplex<WithAsyncMethod_GetPropertyPropComplex<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Create() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackBidiHandler< ::google::protobuf::Any, ::google::protobuf::Any>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->Create(context); }));
    }
    ~ExperimentalWithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::google::protobuf::Any, ::google::protobuf::Any>* Create(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::google::protobuf::Any, ::google::protobuf::Any>* Create(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListenEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListenEvents() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::Tests::Test1ListenEventStream, ::google::protobuf::Any>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1ListenEventStream* request) { return this->ListenEvents(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_ListenEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenEvents(::grpc::ServerContext* /*context*/, const ::Tests::Test1ListenEventStream* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::google::protobuf::Any>* ListenEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1ListenEventStream* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::google::protobuf::Any>* ListenEvents(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1ListenEventStream* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TestMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TestMethod() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodMethodRequest, ::Tests::Test1TestMethodMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1TestMethodMethodRequest* request, ::Tests::Test1TestMethodMethodResponse* response) { return this->TestMethod(context, request, response); }));}
    void SetMessageAllocatorFor_TestMethod(
        ::grpc::experimental::MessageAllocator< ::Tests::Test1TestMethodMethodRequest, ::Tests::Test1TestMethodMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodMethodRequest, ::Tests::Test1TestMethodMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TestMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethod(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodMethodRequest* /*request*/, ::Tests::Test1TestMethodMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TestMethod(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodMethodRequest* /*request*/, ::Tests::Test1TestMethodMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TestMethod(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodMethodRequest* /*request*/, ::Tests::Test1TestMethodMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TestMethodSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TestMethodSync() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodSyncMethodRequest, ::Tests::Test1TestMethodSyncMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1TestMethodSyncMethodRequest* request, ::Tests::Test1TestMethodSyncMethodResponse* response) { return this->TestMethodSync(context, request, response); }));}
    void SetMessageAllocatorFor_TestMethodSync(
        ::grpc::experimental::MessageAllocator< ::Tests::Test1TestMethodSyncMethodRequest, ::Tests::Test1TestMethodSyncMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodSyncMethodRequest, ::Tests::Test1TestMethodSyncMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TestMethodSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethodSync(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodSyncMethodRequest* /*request*/, ::Tests::Test1TestMethodSyncMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TestMethodSync(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodSyncMethodRequest* /*request*/, ::Tests::Test1TestMethodSyncMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TestMethodSync(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodSyncMethodRequest* /*request*/, ::Tests::Test1TestMethodSyncMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TestMethodWithNoResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TestMethodWithNoResponse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodWithNoResponseMethodRequest, ::Tests::Test1TestMethodWithNoResponseMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response) { return this->TestMethodWithNoResponse(context, request, response); }));}
    void SetMessageAllocatorFor_TestMethodWithNoResponse(
        ::grpc::experimental::MessageAllocator< ::Tests::Test1TestMethodWithNoResponseMethodRequest, ::Tests::Test1TestMethodWithNoResponseMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodWithNoResponseMethodRequest, ::Tests::Test1TestMethodWithNoResponseMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TestMethodWithNoResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethodWithNoResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodWithNoResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TestMethodWithNoResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodWithNoResponseMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TestMethodWithNoResponse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodWithNoResponseMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TestMethodNoRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TestMethodNoRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodNoRequestMethodRequest, ::Tests::Test1TestMethodNoRequestMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response) { return this->TestMethodNoRequest(context, request, response); }));}
    void SetMessageAllocatorFor_TestMethodNoRequest(
        ::grpc::experimental::MessageAllocator< ::Tests::Test1TestMethodNoRequestMethodRequest, ::Tests::Test1TestMethodNoRequestMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodNoRequestMethodRequest, ::Tests::Test1TestMethodNoRequestMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TestMethodNoRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethodNoRequest(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TestMethodNoRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TestMethodNoRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetPropertyPropString() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1PropStringSetRequest, ::Tests::Test1PropStringSetResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1PropStringSetRequest* request, ::Tests::Test1PropStringSetResponse* response) { return this->SetPropertyPropString(context, request, response); }));}
    void SetMessageAllocatorFor_SetPropertyPropString(
        ::grpc::experimental::MessageAllocator< ::Tests::Test1PropStringSetRequest, ::Tests::Test1PropStringSetResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1PropStringSetRequest, ::Tests::Test1PropStringSetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringSetRequest* /*request*/, ::Tests::Test1PropStringSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPropertyPropString(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1PropStringSetRequest* /*request*/, ::Tests::Test1PropStringSetResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPropertyPropString(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1PropStringSetRequest* /*request*/, ::Tests::Test1PropStringSetResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPropertyPropString() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1PropStringGetRequest, ::Tests::Test1PropStringGetResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1PropStringGetRequest* request, ::Tests::Test1PropStringGetResponse* response) { return this->GetPropertyPropString(context, request, response); }));}
    void SetMessageAllocatorFor_GetPropertyPropString(
        ::grpc::experimental::MessageAllocator< ::Tests::Test1PropStringGetRequest, ::Tests::Test1PropStringGetResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1PropStringGetRequest, ::Tests::Test1PropStringGetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringGetRequest* /*request*/, ::Tests::Test1PropStringGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPropertyPropString(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1PropStringGetRequest* /*request*/, ::Tests::Test1PropStringGetResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPropertyPropString(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1PropStringGetRequest* /*request*/, ::Tests::Test1PropStringGetResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetPropertyPropComplex() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1PropComplexSetRequest, ::Tests::Test1PropComplexSetResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1PropComplexSetRequest* request, ::Tests::Test1PropComplexSetResponse* response) { return this->SetPropertyPropComplex(context, request, response); }));}
    void SetMessageAllocatorFor_SetPropertyPropComplex(
        ::grpc::experimental::MessageAllocator< ::Tests::Test1PropComplexSetRequest, ::Tests::Test1PropComplexSetResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1PropComplexSetRequest, ::Tests::Test1PropComplexSetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexSetRequest* /*request*/, ::Tests::Test1PropComplexSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPropertyPropComplex(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1PropComplexSetRequest* /*request*/, ::Tests::Test1PropComplexSetResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPropertyPropComplex(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1PropComplexSetRequest* /*request*/, ::Tests::Test1PropComplexSetResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPropertyPropComplex() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1PropComplexGetRequest, ::Tests::Test1PropComplexGetResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1PropComplexGetRequest* request, ::Tests::Test1PropComplexGetResponse* response) { return this->GetPropertyPropComplex(context, request, response); }));}
    void SetMessageAllocatorFor_GetPropertyPropComplex(
        ::grpc::experimental::MessageAllocator< ::Tests::Test1PropComplexGetRequest, ::Tests::Test1PropComplexGetResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1PropComplexGetRequest, ::Tests::Test1PropComplexGetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexGetRequest* /*request*/, ::Tests::Test1PropComplexGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPropertyPropComplex(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1PropComplexGetRequest* /*request*/, ::Tests::Test1PropComplexGetResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPropertyPropComplex(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1PropComplexGetRequest* /*request*/, ::Tests::Test1PropComplexGetResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_ListenEvents<ExperimentalWithCallbackMethod_TestMethod<ExperimentalWithCallbackMethod_TestMethodSync<ExperimentalWithCallbackMethod_TestMethodWithNoResponse<ExperimentalWithCallbackMethod_TestMethodNoRequest<ExperimentalWithCallbackMethod_SetPropertyPropString<ExperimentalWithCallbackMethod_GetPropertyPropString<ExperimentalWithCallbackMethod_SetPropertyPropComplex<ExperimentalWithCallbackMethod_GetPropertyPropComplex<Service > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_ListenEvents<ExperimentalWithCallbackMethod_TestMethod<ExperimentalWithCallbackMethod_TestMethodSync<ExperimentalWithCallbackMethod_TestMethodWithNoResponse<ExperimentalWithCallbackMethod_TestMethodNoRequest<ExperimentalWithCallbackMethod_SetPropertyPropString<ExperimentalWithCallbackMethod_GetPropertyPropString<ExperimentalWithCallbackMethod_SetPropertyPropComplex<ExperimentalWithCallbackMethod_GetPropertyPropComplex<Service > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListenEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListenEvents() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListenEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenEvents(::grpc::ServerContext* /*context*/, const ::Tests::Test1ListenEventStream* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TestMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TestMethod() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_TestMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethod(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodMethodRequest* /*request*/, ::Tests::Test1TestMethodMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TestMethodSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TestMethodSync() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_TestMethodSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethodSync(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodSyncMethodRequest* /*request*/, ::Tests::Test1TestMethodSyncMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TestMethodWithNoResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TestMethodWithNoResponse() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_TestMethodWithNoResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethodWithNoResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodWithNoResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TestMethodNoRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TestMethodNoRequest() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_TestMethodNoRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethodNoRequest(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPropertyPropString() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringSetRequest* /*request*/, ::Tests::Test1PropStringSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPropertyPropString() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringGetRequest* /*request*/, ::Tests::Test1PropStringGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPropertyPropComplex() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexSetRequest* /*request*/, ::Tests::Test1PropComplexSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPropertyPropComplex() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexGetRequest* /*request*/, ::Tests::Test1PropComplexGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListenEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListenEvents() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListenEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenEvents(::grpc::ServerContext* /*context*/, const ::Tests::Test1ListenEventStream* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListenEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TestMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TestMethod() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_TestMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethod(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodMethodRequest* /*request*/, ::Tests::Test1TestMethodMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestMethod(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TestMethodSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TestMethodSync() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_TestMethodSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethodSync(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodSyncMethodRequest* /*request*/, ::Tests::Test1TestMethodSyncMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestMethodSync(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TestMethodWithNoResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TestMethodWithNoResponse() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_TestMethodWithNoResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethodWithNoResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodWithNoResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestMethodWithNoResponse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TestMethodNoRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TestMethodNoRequest() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_TestMethodNoRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethodNoRequest(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestMethodNoRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPropertyPropString() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringSetRequest* /*request*/, ::Tests::Test1PropStringSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPropertyPropString(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPropertyPropString() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringGetRequest* /*request*/, ::Tests::Test1PropStringGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPropertyPropString(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPropertyPropComplex() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexSetRequest* /*request*/, ::Tests::Test1PropComplexSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPropertyPropComplex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPropertyPropComplex() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexGetRequest* /*request*/, ::Tests::Test1PropComplexGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPropertyPropComplex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Create() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->Create(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Create(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Create(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListenEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListenEvents() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->ListenEvents(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListenEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenEvents(::grpc::ServerContext* /*context*/, const ::Tests::Test1ListenEventStream* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ListenEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* ListenEvents(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TestMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TestMethod() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TestMethod(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TestMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethod(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodMethodRequest* /*request*/, ::Tests::Test1TestMethodMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TestMethod(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TestMethod(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TestMethodSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TestMethodSync() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TestMethodSync(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TestMethodSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethodSync(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodSyncMethodRequest* /*request*/, ::Tests::Test1TestMethodSyncMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TestMethodSync(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TestMethodSync(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TestMethodWithNoResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TestMethodWithNoResponse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TestMethodWithNoResponse(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TestMethodWithNoResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethodWithNoResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodWithNoResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TestMethodWithNoResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TestMethodWithNoResponse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TestMethodNoRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TestMethodNoRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TestMethodNoRequest(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TestMethodNoRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestMethodNoRequest(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TestMethodNoRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TestMethodNoRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetPropertyPropString() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPropertyPropString(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringSetRequest* /*request*/, ::Tests::Test1PropStringSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPropertyPropString(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPropertyPropString(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPropertyPropString() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPropertyPropString(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringGetRequest* /*request*/, ::Tests::Test1PropStringGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPropertyPropString(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPropertyPropString(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetPropertyPropComplex() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPropertyPropComplex(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexSetRequest* /*request*/, ::Tests::Test1PropComplexSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPropertyPropComplex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPropertyPropComplex(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPropertyPropComplex() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPropertyPropComplex(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexGetRequest* /*request*/, ::Tests::Test1PropComplexGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPropertyPropComplex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPropertyPropComplex(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TestMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TestMethod() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test1TestMethodMethodRequest, ::Tests::Test1TestMethodMethodResponse>(std::bind(&WithStreamedUnaryMethod_TestMethod<BaseClass>::StreamedTestMethod, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TestMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TestMethod(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodMethodRequest* /*request*/, ::Tests::Test1TestMethodMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTestMethod(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test1TestMethodMethodRequest,::Tests::Test1TestMethodMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TestMethodSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TestMethodSync() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test1TestMethodSyncMethodRequest, ::Tests::Test1TestMethodSyncMethodResponse>(std::bind(&WithStreamedUnaryMethod_TestMethodSync<BaseClass>::StreamedTestMethodSync, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TestMethodSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TestMethodSync(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodSyncMethodRequest* /*request*/, ::Tests::Test1TestMethodSyncMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTestMethodSync(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test1TestMethodSyncMethodRequest,::Tests::Test1TestMethodSyncMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TestMethodWithNoResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TestMethodWithNoResponse() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test1TestMethodWithNoResponseMethodRequest, ::Tests::Test1TestMethodWithNoResponseMethodResponse>(std::bind(&WithStreamedUnaryMethod_TestMethodWithNoResponse<BaseClass>::StreamedTestMethodWithNoResponse, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TestMethodWithNoResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TestMethodWithNoResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodWithNoResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTestMethodWithNoResponse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test1TestMethodWithNoResponseMethodRequest,::Tests::Test1TestMethodWithNoResponseMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TestMethodNoRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TestMethodNoRequest() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test1TestMethodNoRequestMethodRequest, ::Tests::Test1TestMethodNoRequestMethodResponse>(std::bind(&WithStreamedUnaryMethod_TestMethodNoRequest<BaseClass>::StreamedTestMethodNoRequest, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TestMethodNoRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TestMethodNoRequest(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTestMethodNoRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test1TestMethodNoRequestMethodRequest,::Tests::Test1TestMethodNoRequestMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPropertyPropString() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test1PropStringSetRequest, ::Tests::Test1PropStringSetResponse>(std::bind(&WithStreamedUnaryMethod_SetPropertyPropString<BaseClass>::StreamedSetPropertyPropString, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringSetRequest* /*request*/, ::Tests::Test1PropStringSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPropertyPropString(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test1PropStringSetRequest,::Tests::Test1PropStringSetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPropertyPropString() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test1PropStringGetRequest, ::Tests::Test1PropStringGetResponse>(std::bind(&WithStreamedUnaryMethod_GetPropertyPropString<BaseClass>::StreamedGetPropertyPropString, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringGetRequest* /*request*/, ::Tests::Test1PropStringGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPropertyPropString(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test1PropStringGetRequest,::Tests::Test1PropStringGetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPropertyPropComplex() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test1PropComplexSetRequest, ::Tests::Test1PropComplexSetResponse>(std::bind(&WithStreamedUnaryMethod_SetPropertyPropComplex<BaseClass>::StreamedSetPropertyPropComplex, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexSetRequest* /*request*/, ::Tests::Test1PropComplexSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPropertyPropComplex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test1PropComplexSetRequest,::Tests::Test1PropComplexSetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPropertyPropComplex() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test1PropComplexGetRequest, ::Tests::Test1PropComplexGetResponse>(std::bind(&WithStreamedUnaryMethod_GetPropertyPropComplex<BaseClass>::StreamedGetPropertyPropComplex, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexGetRequest* /*request*/, ::Tests::Test1PropComplexGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPropertyPropComplex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test1PropComplexGetRequest,::Tests::Test1PropComplexGetResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_TestMethod<WithStreamedUnaryMethod_TestMethodSync<WithStreamedUnaryMethod_TestMethodWithNoResponse<WithStreamedUnaryMethod_TestMethodNoRequest<WithStreamedUnaryMethod_SetPropertyPropString<WithStreamedUnaryMethod_GetPropertyPropString<WithStreamedUnaryMethod_SetPropertyPropComplex<WithStreamedUnaryMethod_GetPropertyPropComplex<Service > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ListenEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ListenEvents() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::Tests::Test1ListenEventStream, ::google::protobuf::Any>(std::bind(&WithSplitStreamingMethod_ListenEvents<BaseClass>::StreamedListenEvents, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ListenEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListenEvents(::grpc::ServerContext* /*context*/, const ::Tests::Test1ListenEventStream* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListenEvents(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Tests::Test1ListenEventStream,::google::protobuf::Any>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ListenEvents<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_ListenEvents<WithStreamedUnaryMethod_TestMethod<WithStreamedUnaryMethod_TestMethodSync<WithStreamedUnaryMethod_TestMethodWithNoResponse<WithStreamedUnaryMethod_TestMethodNoRequest<WithStreamedUnaryMethod_SetPropertyPropString<WithStreamedUnaryMethod_GetPropertyPropString<WithStreamedUnaryMethod_SetPropertyPropComplex<WithStreamedUnaryMethod_GetPropertyPropComplex<Service > > > > > > > > > StreamedService;
};

}  // namespace Tests


#endif  // GRPC_gen_2eproto__INCLUDED
