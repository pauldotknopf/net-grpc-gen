// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gen.proto

#include "gen.pb.h"
#include "gen.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Tests {

static const char* Test1ObjectService_method_names[] = {
  "/Tests.Test1ObjectService/Create",
  "/Tests.Test1ObjectService/ListenEvents",
  "/Tests.Test1ObjectService/InvokeTestMethod",
  "/Tests.Test1ObjectService/InvokeTestMethodSync",
  "/Tests.Test1ObjectService/InvokeTestMethodWithNoResponse",
  "/Tests.Test1ObjectService/InvokeTestMethodNoRequest",
  "/Tests.Test1ObjectService/SetPropertyPropString",
  "/Tests.Test1ObjectService/GetPropertyPropString",
  "/Tests.Test1ObjectService/SetPropertyPropComplex",
  "/Tests.Test1ObjectService/GetPropertyPropComplex",
};

std::unique_ptr< Test1ObjectService::Stub> Test1ObjectService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Test1ObjectService::Stub> stub(new Test1ObjectService::Stub(channel));
  return stub;
}

Test1ObjectService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Create_(Test1ObjectService_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_ListenEvents_(Test1ObjectService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_InvokeTestMethod_(Test1ObjectService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InvokeTestMethodSync_(Test1ObjectService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InvokeTestMethodWithNoResponse_(Test1ObjectService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InvokeTestMethodNoRequest_(Test1ObjectService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPropertyPropString_(Test1ObjectService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPropertyPropString_(Test1ObjectService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPropertyPropComplex_(Test1ObjectService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPropertyPropComplex_(Test1ObjectService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* Test1ObjectService::Stub::CreateRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::google::protobuf::Any, ::google::protobuf::Any>::Create(channel_.get(), rpcmethod_Create_, context);
}

void Test1ObjectService::Stub::experimental_async::Create(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::google::protobuf::Any,::google::protobuf::Any>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::google::protobuf::Any,::google::protobuf::Any>::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* Test1ObjectService::Stub::AsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::google::protobuf::Any, ::google::protobuf::Any>::Create(channel_.get(), cq, rpcmethod_Create_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* Test1ObjectService::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::google::protobuf::Any, ::google::protobuf::Any>::Create(channel_.get(), cq, rpcmethod_Create_, context, false, nullptr);
}

::grpc::ClientReader< ::google::protobuf::Any>* Test1ObjectService::Stub::ListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::google::protobuf::Any>::Create(channel_.get(), rpcmethod_ListenEvents_, context, request);
}

void Test1ObjectService::Stub::experimental_async::ListenEvents(::grpc::ClientContext* context, ::Tests::Test1ListenEventStream* request, ::grpc::experimental::ClientReadReactor< ::google::protobuf::Any>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::google::protobuf::Any>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenEvents_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::google::protobuf::Any>* Test1ObjectService::Stub::AsyncListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::google::protobuf::Any>::Create(channel_.get(), cq, rpcmethod_ListenEvents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::google::protobuf::Any>* Test1ObjectService::Stub::PrepareAsyncListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::google::protobuf::Any>::Create(channel_.get(), cq, rpcmethod_ListenEvents_, context, request, false, nullptr);
}

::grpc::Status Test1ObjectService::Stub::InvokeTestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::Tests::Test1TestMethodMethodResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_InvokeTestMethod_, context, request, response);
}

void Test1ObjectService::Stub::experimental_async::InvokeTestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest* request, ::Tests::Test1TestMethodMethodResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethod_, context, request, response, std::move(f));
}

void Test1ObjectService::Stub::experimental_async::InvokeTestMethod(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodMethodResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethod_, context, request, response, std::move(f));
}

void Test1ObjectService::Stub::experimental_async::InvokeTestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest* request, ::Tests::Test1TestMethodMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethod_, context, request, response, reactor);
}

void Test1ObjectService::Stub::experimental_async::InvokeTestMethod(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethod_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodMethodResponse>* Test1ObjectService::Stub::AsyncInvokeTestMethodRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test1TestMethodMethodResponse>::Create(channel_.get(), cq, rpcmethod_InvokeTestMethod_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodMethodResponse>* Test1ObjectService::Stub::PrepareAsyncInvokeTestMethodRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test1TestMethodMethodResponse>::Create(channel_.get(), cq, rpcmethod_InvokeTestMethod_, context, request, false);
}

::grpc::Status Test1ObjectService::Stub::InvokeTestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::Tests::Test1TestMethodSyncMethodResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_InvokeTestMethodSync_, context, request, response);
}

void Test1ObjectService::Stub::experimental_async::InvokeTestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest* request, ::Tests::Test1TestMethodSyncMethodResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodSync_, context, request, response, std::move(f));
}

void Test1ObjectService::Stub::experimental_async::InvokeTestMethodSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodSyncMethodResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodSync_, context, request, response, std::move(f));
}

void Test1ObjectService::Stub::experimental_async::InvokeTestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest* request, ::Tests::Test1TestMethodSyncMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodSync_, context, request, response, reactor);
}

void Test1ObjectService::Stub::experimental_async::InvokeTestMethodSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodSyncMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodSync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodSyncMethodResponse>* Test1ObjectService::Stub::AsyncInvokeTestMethodSyncRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test1TestMethodSyncMethodResponse>::Create(channel_.get(), cq, rpcmethod_InvokeTestMethodSync_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodSyncMethodResponse>* Test1ObjectService::Stub::PrepareAsyncInvokeTestMethodSyncRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test1TestMethodSyncMethodResponse>::Create(channel_.get(), cq, rpcmethod_InvokeTestMethodSync_, context, request, false);
}

::grpc::Status Test1ObjectService::Stub::InvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_InvokeTestMethodWithNoResponse_, context, request, response);
}

void Test1ObjectService::Stub::experimental_async::InvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodWithNoResponse_, context, request, response, std::move(f));
}

void Test1ObjectService::Stub::experimental_async::InvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodWithNoResponse_, context, request, response, std::move(f));
}

void Test1ObjectService::Stub::experimental_async::InvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodWithNoResponse_, context, request, response, reactor);
}

void Test1ObjectService::Stub::experimental_async::InvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodWithNoResponse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodWithNoResponseMethodResponse>* Test1ObjectService::Stub::AsyncInvokeTestMethodWithNoResponseRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test1TestMethodWithNoResponseMethodResponse>::Create(channel_.get(), cq, rpcmethod_InvokeTestMethodWithNoResponse_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodWithNoResponseMethodResponse>* Test1ObjectService::Stub::PrepareAsyncInvokeTestMethodWithNoResponseRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test1TestMethodWithNoResponseMethodResponse>::Create(channel_.get(), cq, rpcmethod_InvokeTestMethodWithNoResponse_, context, request, false);
}

::grpc::Status Test1ObjectService::Stub::InvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::Tests::Test1TestMethodNoRequestMethodResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_InvokeTestMethodNoRequest_, context, request, response);
}

void Test1ObjectService::Stub::experimental_async::InvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodNoRequest_, context, request, response, std::move(f));
}

void Test1ObjectService::Stub::experimental_async::InvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodNoRequest_, context, request, response, std::move(f));
}

void Test1ObjectService::Stub::experimental_async::InvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodNoRequest_, context, request, response, reactor);
}

void Test1ObjectService::Stub::experimental_async::InvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodNoRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestMethodResponse>* Test1ObjectService::Stub::AsyncInvokeTestMethodNoRequestRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test1TestMethodNoRequestMethodResponse>::Create(channel_.get(), cq, rpcmethod_InvokeTestMethodNoRequest_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestMethodResponse>* Test1ObjectService::Stub::PrepareAsyncInvokeTestMethodNoRequestRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test1TestMethodNoRequestMethodResponse>::Create(channel_.get(), cq, rpcmethod_InvokeTestMethodNoRequest_, context, request, false);
}

::grpc::Status Test1ObjectService::Stub::SetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::Tests::Test1PropStringSetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetPropertyPropString_, context, request, response);
}

void Test1ObjectService::Stub::experimental_async::SetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest* request, ::Tests::Test1PropStringSetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPropertyPropString_, context, request, response, std::move(f));
}

void Test1ObjectService::Stub::experimental_async::SetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringSetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPropertyPropString_, context, request, response, std::move(f));
}

void Test1ObjectService::Stub::experimental_async::SetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest* request, ::Tests::Test1PropStringSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPropertyPropString_, context, request, response, reactor);
}

void Test1ObjectService::Stub::experimental_async::SetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPropertyPropString_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringSetResponse>* Test1ObjectService::Stub::AsyncSetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test1PropStringSetResponse>::Create(channel_.get(), cq, rpcmethod_SetPropertyPropString_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringSetResponse>* Test1ObjectService::Stub::PrepareAsyncSetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test1PropStringSetResponse>::Create(channel_.get(), cq, rpcmethod_SetPropertyPropString_, context, request, false);
}

::grpc::Status Test1ObjectService::Stub::GetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::Tests::Test1PropStringGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPropertyPropString_, context, request, response);
}

void Test1ObjectService::Stub::experimental_async::GetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest* request, ::Tests::Test1PropStringGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPropertyPropString_, context, request, response, std::move(f));
}

void Test1ObjectService::Stub::experimental_async::GetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPropertyPropString_, context, request, response, std::move(f));
}

void Test1ObjectService::Stub::experimental_async::GetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest* request, ::Tests::Test1PropStringGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPropertyPropString_, context, request, response, reactor);
}

void Test1ObjectService::Stub::experimental_async::GetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPropertyPropString_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringGetResponse>* Test1ObjectService::Stub::AsyncGetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test1PropStringGetResponse>::Create(channel_.get(), cq, rpcmethod_GetPropertyPropString_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringGetResponse>* Test1ObjectService::Stub::PrepareAsyncGetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test1PropStringGetResponse>::Create(channel_.get(), cq, rpcmethod_GetPropertyPropString_, context, request, false);
}

::grpc::Status Test1ObjectService::Stub::SetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::Tests::Test1PropComplexSetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetPropertyPropComplex_, context, request, response);
}

void Test1ObjectService::Stub::experimental_async::SetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest* request, ::Tests::Test1PropComplexSetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPropertyPropComplex_, context, request, response, std::move(f));
}

void Test1ObjectService::Stub::experimental_async::SetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexSetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPropertyPropComplex_, context, request, response, std::move(f));
}

void Test1ObjectService::Stub::experimental_async::SetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest* request, ::Tests::Test1PropComplexSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPropertyPropComplex_, context, request, response, reactor);
}

void Test1ObjectService::Stub::experimental_async::SetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPropertyPropComplex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexSetResponse>* Test1ObjectService::Stub::AsyncSetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test1PropComplexSetResponse>::Create(channel_.get(), cq, rpcmethod_SetPropertyPropComplex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexSetResponse>* Test1ObjectService::Stub::PrepareAsyncSetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test1PropComplexSetResponse>::Create(channel_.get(), cq, rpcmethod_SetPropertyPropComplex_, context, request, false);
}

::grpc::Status Test1ObjectService::Stub::GetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::Tests::Test1PropComplexGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPropertyPropComplex_, context, request, response);
}

void Test1ObjectService::Stub::experimental_async::GetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest* request, ::Tests::Test1PropComplexGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPropertyPropComplex_, context, request, response, std::move(f));
}

void Test1ObjectService::Stub::experimental_async::GetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPropertyPropComplex_, context, request, response, std::move(f));
}

void Test1ObjectService::Stub::experimental_async::GetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest* request, ::Tests::Test1PropComplexGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPropertyPropComplex_, context, request, response, reactor);
}

void Test1ObjectService::Stub::experimental_async::GetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPropertyPropComplex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexGetResponse>* Test1ObjectService::Stub::AsyncGetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test1PropComplexGetResponse>::Create(channel_.get(), cq, rpcmethod_GetPropertyPropComplex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexGetResponse>* Test1ObjectService::Stub::PrepareAsyncGetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test1PropComplexGetResponse>::Create(channel_.get(), cq, rpcmethod_GetPropertyPropComplex_, context, request, false);
}

Test1ObjectService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test1ObjectService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Test1ObjectService::Service, ::google::protobuf::Any, ::google::protobuf::Any>(
          std::mem_fn(&Test1ObjectService::Service::Create), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test1ObjectService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Test1ObjectService::Service, ::Tests::Test1ListenEventStream, ::google::protobuf::Any>(
          std::mem_fn(&Test1ObjectService::Service::ListenEvents), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test1ObjectService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test1ObjectService::Service, ::Tests::Test1TestMethodMethodRequest, ::Tests::Test1TestMethodMethodResponse>(
          std::mem_fn(&Test1ObjectService::Service::InvokeTestMethod), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test1ObjectService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test1ObjectService::Service, ::Tests::Test1TestMethodSyncMethodRequest, ::Tests::Test1TestMethodSyncMethodResponse>(
          std::mem_fn(&Test1ObjectService::Service::InvokeTestMethodSync), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test1ObjectService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test1ObjectService::Service, ::Tests::Test1TestMethodWithNoResponseMethodRequest, ::Tests::Test1TestMethodWithNoResponseMethodResponse>(
          std::mem_fn(&Test1ObjectService::Service::InvokeTestMethodWithNoResponse), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test1ObjectService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test1ObjectService::Service, ::Tests::Test1TestMethodNoRequestMethodRequest, ::Tests::Test1TestMethodNoRequestMethodResponse>(
          std::mem_fn(&Test1ObjectService::Service::InvokeTestMethodNoRequest), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test1ObjectService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test1ObjectService::Service, ::Tests::Test1PropStringSetRequest, ::Tests::Test1PropStringSetResponse>(
          std::mem_fn(&Test1ObjectService::Service::SetPropertyPropString), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test1ObjectService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test1ObjectService::Service, ::Tests::Test1PropStringGetRequest, ::Tests::Test1PropStringGetResponse>(
          std::mem_fn(&Test1ObjectService::Service::GetPropertyPropString), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test1ObjectService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test1ObjectService::Service, ::Tests::Test1PropComplexSetRequest, ::Tests::Test1PropComplexSetResponse>(
          std::mem_fn(&Test1ObjectService::Service::SetPropertyPropComplex), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test1ObjectService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test1ObjectService::Service, ::Tests::Test1PropComplexGetRequest, ::Tests::Test1PropComplexGetResponse>(
          std::mem_fn(&Test1ObjectService::Service::GetPropertyPropComplex), this)));
}

Test1ObjectService::Service::~Service() {
}

::grpc::Status Test1ObjectService::Service::Create(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test1ObjectService::Service::ListenEvents(::grpc::ServerContext* context, const ::Tests::Test1ListenEventStream* request, ::grpc::ServerWriter< ::google::protobuf::Any>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test1ObjectService::Service::InvokeTestMethod(::grpc::ServerContext* context, const ::Tests::Test1TestMethodMethodRequest* request, ::Tests::Test1TestMethodMethodResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test1ObjectService::Service::InvokeTestMethodSync(::grpc::ServerContext* context, const ::Tests::Test1TestMethodSyncMethodRequest* request, ::Tests::Test1TestMethodSyncMethodResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test1ObjectService::Service::InvokeTestMethodWithNoResponse(::grpc::ServerContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test1ObjectService::Service::InvokeTestMethodNoRequest(::grpc::ServerContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test1ObjectService::Service::SetPropertyPropString(::grpc::ServerContext* context, const ::Tests::Test1PropStringSetRequest* request, ::Tests::Test1PropStringSetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test1ObjectService::Service::GetPropertyPropString(::grpc::ServerContext* context, const ::Tests::Test1PropStringGetRequest* request, ::Tests::Test1PropStringGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test1ObjectService::Service::SetPropertyPropComplex(::grpc::ServerContext* context, const ::Tests::Test1PropComplexSetRequest* request, ::Tests::Test1PropComplexSetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test1ObjectService::Service::GetPropertyPropComplex(::grpc::ServerContext* context, const ::Tests::Test1PropComplexGetRequest* request, ::Tests::Test1PropComplexGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Test2ObjectService_method_names[] = {
  "/Tests.Test2ObjectService/Create",
  "/Tests.Test2ObjectService/ListenEvents",
  "/Tests.Test2ObjectService/InvokeTestMethod2",
  "/Tests.Test2ObjectService/InvokeTestMethodSync2",
  "/Tests.Test2ObjectService/InvokeTestMethodWithNoResponse2",
  "/Tests.Test2ObjectService/InvokeTestMethodNoRequest2",
  "/Tests.Test2ObjectService/SetPropertyPropString2",
  "/Tests.Test2ObjectService/GetPropertyPropString2",
  "/Tests.Test2ObjectService/SetPropertyPropComplex2",
  "/Tests.Test2ObjectService/GetPropertyPropComplex2",
};

std::unique_ptr< Test2ObjectService::Stub> Test2ObjectService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Test2ObjectService::Stub> stub(new Test2ObjectService::Stub(channel));
  return stub;
}

Test2ObjectService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Create_(Test2ObjectService_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_ListenEvents_(Test2ObjectService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_InvokeTestMethod2_(Test2ObjectService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InvokeTestMethodSync2_(Test2ObjectService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InvokeTestMethodWithNoResponse2_(Test2ObjectService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InvokeTestMethodNoRequest2_(Test2ObjectService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPropertyPropString2_(Test2ObjectService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPropertyPropString2_(Test2ObjectService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPropertyPropComplex2_(Test2ObjectService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPropertyPropComplex2_(Test2ObjectService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* Test2ObjectService::Stub::CreateRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::google::protobuf::Any, ::google::protobuf::Any>::Create(channel_.get(), rpcmethod_Create_, context);
}

void Test2ObjectService::Stub::experimental_async::Create(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::google::protobuf::Any,::google::protobuf::Any>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::google::protobuf::Any,::google::protobuf::Any>::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* Test2ObjectService::Stub::AsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::google::protobuf::Any, ::google::protobuf::Any>::Create(channel_.get(), cq, rpcmethod_Create_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* Test2ObjectService::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::google::protobuf::Any, ::google::protobuf::Any>::Create(channel_.get(), cq, rpcmethod_Create_, context, false, nullptr);
}

::grpc::ClientReader< ::google::protobuf::Any>* Test2ObjectService::Stub::ListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test2ListenEventStream& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::google::protobuf::Any>::Create(channel_.get(), rpcmethod_ListenEvents_, context, request);
}

void Test2ObjectService::Stub::experimental_async::ListenEvents(::grpc::ClientContext* context, ::Tests::Test2ListenEventStream* request, ::grpc::experimental::ClientReadReactor< ::google::protobuf::Any>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::google::protobuf::Any>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenEvents_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::google::protobuf::Any>* Test2ObjectService::Stub::AsyncListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test2ListenEventStream& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::google::protobuf::Any>::Create(channel_.get(), cq, rpcmethod_ListenEvents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::google::protobuf::Any>* Test2ObjectService::Stub::PrepareAsyncListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test2ListenEventStream& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::google::protobuf::Any>::Create(channel_.get(), cq, rpcmethod_ListenEvents_, context, request, false, nullptr);
}

::grpc::Status Test2ObjectService::Stub::InvokeTestMethod2(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest& request, ::Tests::Test2TestMethod2MethodResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_InvokeTestMethod2_, context, request, response);
}

void Test2ObjectService::Stub::experimental_async::InvokeTestMethod2(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest* request, ::Tests::Test2TestMethod2MethodResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethod2_, context, request, response, std::move(f));
}

void Test2ObjectService::Stub::experimental_async::InvokeTestMethod2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethod2MethodResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethod2_, context, request, response, std::move(f));
}

void Test2ObjectService::Stub::experimental_async::InvokeTestMethod2(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest* request, ::Tests::Test2TestMethod2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethod2_, context, request, response, reactor);
}

void Test2ObjectService::Stub::experimental_async::InvokeTestMethod2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethod2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethod2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethod2MethodResponse>* Test2ObjectService::Stub::AsyncInvokeTestMethod2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test2TestMethod2MethodResponse>::Create(channel_.get(), cq, rpcmethod_InvokeTestMethod2_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethod2MethodResponse>* Test2ObjectService::Stub::PrepareAsyncInvokeTestMethod2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test2TestMethod2MethodResponse>::Create(channel_.get(), cq, rpcmethod_InvokeTestMethod2_, context, request, false);
}

::grpc::Status Test2ObjectService::Stub::InvokeTestMethodSync2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest& request, ::Tests::Test2TestMethodSync2MethodResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_InvokeTestMethodSync2_, context, request, response);
}

void Test2ObjectService::Stub::experimental_async::InvokeTestMethodSync2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest* request, ::Tests::Test2TestMethodSync2MethodResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodSync2_, context, request, response, std::move(f));
}

void Test2ObjectService::Stub::experimental_async::InvokeTestMethodSync2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodSync2MethodResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodSync2_, context, request, response, std::move(f));
}

void Test2ObjectService::Stub::experimental_async::InvokeTestMethodSync2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest* request, ::Tests::Test2TestMethodSync2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodSync2_, context, request, response, reactor);
}

void Test2ObjectService::Stub::experimental_async::InvokeTestMethodSync2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodSync2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodSync2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodSync2MethodResponse>* Test2ObjectService::Stub::AsyncInvokeTestMethodSync2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test2TestMethodSync2MethodResponse>::Create(channel_.get(), cq, rpcmethod_InvokeTestMethodSync2_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodSync2MethodResponse>* Test2ObjectService::Stub::PrepareAsyncInvokeTestMethodSync2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test2TestMethodSync2MethodResponse>::Create(channel_.get(), cq, rpcmethod_InvokeTestMethodSync2_, context, request, false);
}

::grpc::Status Test2ObjectService::Stub::InvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest& request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_InvokeTestMethodWithNoResponse2_, context, request, response);
}

void Test2ObjectService::Stub::experimental_async::InvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest* request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodWithNoResponse2_, context, request, response, std::move(f));
}

void Test2ObjectService::Stub::experimental_async::InvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodWithNoResponse2_, context, request, response, std::move(f));
}

void Test2ObjectService::Stub::experimental_async::InvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest* request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodWithNoResponse2_, context, request, response, reactor);
}

void Test2ObjectService::Stub::experimental_async::InvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodWithNoResponse2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodWithNoResponse2MethodResponse>* Test2ObjectService::Stub::AsyncInvokeTestMethodWithNoResponse2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test2TestMethodWithNoResponse2MethodResponse>::Create(channel_.get(), cq, rpcmethod_InvokeTestMethodWithNoResponse2_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodWithNoResponse2MethodResponse>* Test2ObjectService::Stub::PrepareAsyncInvokeTestMethodWithNoResponse2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test2TestMethodWithNoResponse2MethodResponse>::Create(channel_.get(), cq, rpcmethod_InvokeTestMethodWithNoResponse2_, context, request, false);
}

::grpc::Status Test2ObjectService::Stub::InvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest& request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_InvokeTestMethodNoRequest2_, context, request, response);
}

void Test2ObjectService::Stub::experimental_async::InvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest* request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodNoRequest2_, context, request, response, std::move(f));
}

void Test2ObjectService::Stub::experimental_async::InvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodNoRequest2_, context, request, response, std::move(f));
}

void Test2ObjectService::Stub::experimental_async::InvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest* request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodNoRequest2_, context, request, response, reactor);
}

void Test2ObjectService::Stub::experimental_async::InvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InvokeTestMethodNoRequest2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodNoRequest2MethodResponse>* Test2ObjectService::Stub::AsyncInvokeTestMethodNoRequest2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test2TestMethodNoRequest2MethodResponse>::Create(channel_.get(), cq, rpcmethod_InvokeTestMethodNoRequest2_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodNoRequest2MethodResponse>* Test2ObjectService::Stub::PrepareAsyncInvokeTestMethodNoRequest2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test2TestMethodNoRequest2MethodResponse>::Create(channel_.get(), cq, rpcmethod_InvokeTestMethodNoRequest2_, context, request, false);
}

::grpc::Status Test2ObjectService::Stub::SetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest& request, ::Tests::Test2PropString2SetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetPropertyPropString2_, context, request, response);
}

void Test2ObjectService::Stub::experimental_async::SetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest* request, ::Tests::Test2PropString2SetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPropertyPropString2_, context, request, response, std::move(f));
}

void Test2ObjectService::Stub::experimental_async::SetPropertyPropString2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropString2SetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPropertyPropString2_, context, request, response, std::move(f));
}

void Test2ObjectService::Stub::experimental_async::SetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest* request, ::Tests::Test2PropString2SetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPropertyPropString2_, context, request, response, reactor);
}

void Test2ObjectService::Stub::experimental_async::SetPropertyPropString2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropString2SetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPropertyPropString2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test2PropString2SetResponse>* Test2ObjectService::Stub::AsyncSetPropertyPropString2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test2PropString2SetResponse>::Create(channel_.get(), cq, rpcmethod_SetPropertyPropString2_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test2PropString2SetResponse>* Test2ObjectService::Stub::PrepareAsyncSetPropertyPropString2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test2PropString2SetResponse>::Create(channel_.get(), cq, rpcmethod_SetPropertyPropString2_, context, request, false);
}

::grpc::Status Test2ObjectService::Stub::GetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest& request, ::Tests::Test2PropString2GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPropertyPropString2_, context, request, response);
}

void Test2ObjectService::Stub::experimental_async::GetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest* request, ::Tests::Test2PropString2GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPropertyPropString2_, context, request, response, std::move(f));
}

void Test2ObjectService::Stub::experimental_async::GetPropertyPropString2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropString2GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPropertyPropString2_, context, request, response, std::move(f));
}

void Test2ObjectService::Stub::experimental_async::GetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest* request, ::Tests::Test2PropString2GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPropertyPropString2_, context, request, response, reactor);
}

void Test2ObjectService::Stub::experimental_async::GetPropertyPropString2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropString2GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPropertyPropString2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test2PropString2GetResponse>* Test2ObjectService::Stub::AsyncGetPropertyPropString2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test2PropString2GetResponse>::Create(channel_.get(), cq, rpcmethod_GetPropertyPropString2_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test2PropString2GetResponse>* Test2ObjectService::Stub::PrepareAsyncGetPropertyPropString2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test2PropString2GetResponse>::Create(channel_.get(), cq, rpcmethod_GetPropertyPropString2_, context, request, false);
}

::grpc::Status Test2ObjectService::Stub::SetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest& request, ::Tests::Test2PropComplex2SetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetPropertyPropComplex2_, context, request, response);
}

void Test2ObjectService::Stub::experimental_async::SetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest* request, ::Tests::Test2PropComplex2SetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPropertyPropComplex2_, context, request, response, std::move(f));
}

void Test2ObjectService::Stub::experimental_async::SetPropertyPropComplex2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropComplex2SetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPropertyPropComplex2_, context, request, response, std::move(f));
}

void Test2ObjectService::Stub::experimental_async::SetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest* request, ::Tests::Test2PropComplex2SetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPropertyPropComplex2_, context, request, response, reactor);
}

void Test2ObjectService::Stub::experimental_async::SetPropertyPropComplex2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropComplex2SetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPropertyPropComplex2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test2PropComplex2SetResponse>* Test2ObjectService::Stub::AsyncSetPropertyPropComplex2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test2PropComplex2SetResponse>::Create(channel_.get(), cq, rpcmethod_SetPropertyPropComplex2_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test2PropComplex2SetResponse>* Test2ObjectService::Stub::PrepareAsyncSetPropertyPropComplex2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test2PropComplex2SetResponse>::Create(channel_.get(), cq, rpcmethod_SetPropertyPropComplex2_, context, request, false);
}

::grpc::Status Test2ObjectService::Stub::GetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest& request, ::Tests::Test2PropComplex2GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPropertyPropComplex2_, context, request, response);
}

void Test2ObjectService::Stub::experimental_async::GetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest* request, ::Tests::Test2PropComplex2GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPropertyPropComplex2_, context, request, response, std::move(f));
}

void Test2ObjectService::Stub::experimental_async::GetPropertyPropComplex2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropComplex2GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPropertyPropComplex2_, context, request, response, std::move(f));
}

void Test2ObjectService::Stub::experimental_async::GetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest* request, ::Tests::Test2PropComplex2GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPropertyPropComplex2_, context, request, response, reactor);
}

void Test2ObjectService::Stub::experimental_async::GetPropertyPropComplex2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropComplex2GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPropertyPropComplex2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test2PropComplex2GetResponse>* Test2ObjectService::Stub::AsyncGetPropertyPropComplex2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test2PropComplex2GetResponse>::Create(channel_.get(), cq, rpcmethod_GetPropertyPropComplex2_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Tests::Test2PropComplex2GetResponse>* Test2ObjectService::Stub::PrepareAsyncGetPropertyPropComplex2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Tests::Test2PropComplex2GetResponse>::Create(channel_.get(), cq, rpcmethod_GetPropertyPropComplex2_, context, request, false);
}

Test2ObjectService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test2ObjectService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Test2ObjectService::Service, ::google::protobuf::Any, ::google::protobuf::Any>(
          std::mem_fn(&Test2ObjectService::Service::Create), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test2ObjectService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Test2ObjectService::Service, ::Tests::Test2ListenEventStream, ::google::protobuf::Any>(
          std::mem_fn(&Test2ObjectService::Service::ListenEvents), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test2ObjectService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test2ObjectService::Service, ::Tests::Test2TestMethod2MethodRequest, ::Tests::Test2TestMethod2MethodResponse>(
          std::mem_fn(&Test2ObjectService::Service::InvokeTestMethod2), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test2ObjectService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test2ObjectService::Service, ::Tests::Test2TestMethodSync2MethodRequest, ::Tests::Test2TestMethodSync2MethodResponse>(
          std::mem_fn(&Test2ObjectService::Service::InvokeTestMethodSync2), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test2ObjectService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test2ObjectService::Service, ::Tests::Test2TestMethodWithNoResponse2MethodRequest, ::Tests::Test2TestMethodWithNoResponse2MethodResponse>(
          std::mem_fn(&Test2ObjectService::Service::InvokeTestMethodWithNoResponse2), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test2ObjectService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test2ObjectService::Service, ::Tests::Test2TestMethodNoRequest2MethodRequest, ::Tests::Test2TestMethodNoRequest2MethodResponse>(
          std::mem_fn(&Test2ObjectService::Service::InvokeTestMethodNoRequest2), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test2ObjectService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test2ObjectService::Service, ::Tests::Test2PropString2SetRequest, ::Tests::Test2PropString2SetResponse>(
          std::mem_fn(&Test2ObjectService::Service::SetPropertyPropString2), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test2ObjectService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test2ObjectService::Service, ::Tests::Test2PropString2GetRequest, ::Tests::Test2PropString2GetResponse>(
          std::mem_fn(&Test2ObjectService::Service::GetPropertyPropString2), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test2ObjectService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test2ObjectService::Service, ::Tests::Test2PropComplex2SetRequest, ::Tests::Test2PropComplex2SetResponse>(
          std::mem_fn(&Test2ObjectService::Service::SetPropertyPropComplex2), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test2ObjectService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test2ObjectService::Service, ::Tests::Test2PropComplex2GetRequest, ::Tests::Test2PropComplex2GetResponse>(
          std::mem_fn(&Test2ObjectService::Service::GetPropertyPropComplex2), this)));
}

Test2ObjectService::Service::~Service() {
}

::grpc::Status Test2ObjectService::Service::Create(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test2ObjectService::Service::ListenEvents(::grpc::ServerContext* context, const ::Tests::Test2ListenEventStream* request, ::grpc::ServerWriter< ::google::protobuf::Any>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test2ObjectService::Service::InvokeTestMethod2(::grpc::ServerContext* context, const ::Tests::Test2TestMethod2MethodRequest* request, ::Tests::Test2TestMethod2MethodResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test2ObjectService::Service::InvokeTestMethodSync2(::grpc::ServerContext* context, const ::Tests::Test2TestMethodSync2MethodRequest* request, ::Tests::Test2TestMethodSync2MethodResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test2ObjectService::Service::InvokeTestMethodWithNoResponse2(::grpc::ServerContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest* request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test2ObjectService::Service::InvokeTestMethodNoRequest2(::grpc::ServerContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest* request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test2ObjectService::Service::SetPropertyPropString2(::grpc::ServerContext* context, const ::Tests::Test2PropString2SetRequest* request, ::Tests::Test2PropString2SetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test2ObjectService::Service::GetPropertyPropString2(::grpc::ServerContext* context, const ::Tests::Test2PropString2GetRequest* request, ::Tests::Test2PropString2GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test2ObjectService::Service::SetPropertyPropComplex2(::grpc::ServerContext* context, const ::Tests::Test2PropComplex2SetRequest* request, ::Tests::Test2PropComplex2SetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test2ObjectService::Service::GetPropertyPropComplex2(::grpc::ServerContext* context, const ::Tests::Test2PropComplex2GetRequest* request, ::Tests::Test2PropComplex2GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Tests

