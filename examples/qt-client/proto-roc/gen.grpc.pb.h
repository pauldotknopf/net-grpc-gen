// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gen.proto
#ifndef GRPC_gen_2eproto__INCLUDED
#define GRPC_gen_2eproto__INCLUDED

#include "gen.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Tests {

class Test1ObjectService final {
 public:
  static constexpr char const* service_full_name() {
    return "Tests.Test1ObjectService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>> Create(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>>(CreateRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>> AsyncCreate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>>(AsyncCreateRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>> PrepareAsyncCreate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>>(PrepareAsyncCreateRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::google::protobuf::Any>> ListenEvents(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::google::protobuf::Any>>(ListenEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>> AsyncListenEvents(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>>(AsyncListenEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>> PrepareAsyncListenEvents(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>>(PrepareAsyncListenEventsRaw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::Tests::Test1TestMethodMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodMethodResponse>> AsyncInvokeTestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodMethodResponse>>(AsyncInvokeTestMethodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodMethodResponse>> PrepareAsyncInvokeTestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodMethodResponse>>(PrepareAsyncInvokeTestMethodRaw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::Tests::Test1TestMethodSyncMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodSyncMethodResponse>> AsyncInvokeTestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodSyncMethodResponse>>(AsyncInvokeTestMethodSyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodSyncMethodResponse>> PrepareAsyncInvokeTestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodSyncMethodResponse>>(PrepareAsyncInvokeTestMethodSyncRaw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodWithNoResponseMethodResponse>> AsyncInvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodWithNoResponseMethodResponse>>(AsyncInvokeTestMethodWithNoResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodWithNoResponseMethodResponse>> PrepareAsyncInvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodWithNoResponseMethodResponse>>(PrepareAsyncInvokeTestMethodWithNoResponseRaw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestMethodPrimitive(::grpc::ClientContext* context, const ::Tests::Test1TestMethodPrimitiveMethodRequest& request, ::Tests::Test1TestMethodPrimitiveMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodPrimitiveMethodResponse>> AsyncInvokeTestMethodPrimitive(::grpc::ClientContext* context, const ::Tests::Test1TestMethodPrimitiveMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodPrimitiveMethodResponse>>(AsyncInvokeTestMethodPrimitiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodPrimitiveMethodResponse>> PrepareAsyncInvokeTestMethodPrimitive(::grpc::ClientContext* context, const ::Tests::Test1TestMethodPrimitiveMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodPrimitiveMethodResponse>>(PrepareAsyncInvokeTestMethodPrimitiveRaw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestMethodNoRequestOrResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest& request, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse>> AsyncInvokeTestMethodNoRequestOrResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse>>(AsyncInvokeTestMethodNoRequestOrResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse>> PrepareAsyncInvokeTestMethodNoRequestOrResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse>>(PrepareAsyncInvokeTestMethodNoRequestOrResponseRaw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::Tests::Test1TestMethodNoRequestMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoRequestMethodResponse>> AsyncInvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoRequestMethodResponse>>(AsyncInvokeTestMethodNoRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoRequestMethodResponse>> PrepareAsyncInvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoRequestMethodResponse>>(PrepareAsyncInvokeTestMethodNoRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestMethodNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoResponseMethodRequest& request, ::Tests::Test1TestMethodNoResponseMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoResponseMethodResponse>> AsyncInvokeTestMethodNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoResponseMethodResponse>>(AsyncInvokeTestMethodNoResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoResponseMethodResponse>> PrepareAsyncInvokeTestMethodNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoResponseMethodResponse>>(PrepareAsyncInvokeTestMethodNoResponseRaw(context, request, cq));
    }
    virtual ::grpc::Status SetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::Tests::Test1PropStringSetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringSetResponse>> AsyncSetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringSetResponse>>(AsyncSetPropertyPropStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringSetResponse>> PrepareAsyncSetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringSetResponse>>(PrepareAsyncSetPropertyPropStringRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::Tests::Test1PropStringGetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringGetResponse>> AsyncGetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringGetResponse>>(AsyncGetPropertyPropStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringGetResponse>> PrepareAsyncGetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringGetResponse>>(PrepareAsyncGetPropertyPropStringRaw(context, request, cq));
    }
    virtual ::grpc::Status SetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::Tests::Test1PropComplexSetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexSetResponse>> AsyncSetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexSetResponse>>(AsyncSetPropertyPropComplexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexSetResponse>> PrepareAsyncSetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexSetResponse>>(PrepareAsyncSetPropertyPropComplexRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::Tests::Test1PropComplexGetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexGetResponse>> AsyncGetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexGetResponse>>(AsyncGetPropertyPropComplexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexGetResponse>> PrepareAsyncGetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexGetResponse>>(PrepareAsyncGetPropertyPropComplexRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Create(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::google::protobuf::Any,::google::protobuf::Any>* reactor) = 0;
      #else
      virtual void Create(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::google::protobuf::Any,::google::protobuf::Any>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListenEvents(::grpc::ClientContext* context, ::Tests::Test1ListenEventStream* request, ::grpc::ClientReadReactor< ::google::protobuf::Any>* reactor) = 0;
      #else
      virtual void ListenEvents(::grpc::ClientContext* context, ::Tests::Test1ListenEventStream* request, ::grpc::experimental::ClientReadReactor< ::google::protobuf::Any>* reactor) = 0;
      #endif
      virtual void InvokeTestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest* request, ::Tests::Test1TestMethodMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestMethod(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest* request, ::Tests::Test1TestMethodMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest* request, ::Tests::Test1TestMethodMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethod(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethod(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InvokeTestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest* request, ::Tests::Test1TestMethodSyncMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestMethodSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodSyncMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest* request, ::Tests::Test1TestMethodSyncMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest* request, ::Tests::Test1TestMethodSyncMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethodSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodSyncMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethodSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodSyncMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InvokeTestMethodPrimitive(::grpc::ClientContext* context, const ::Tests::Test1TestMethodPrimitiveMethodRequest* request, ::Tests::Test1TestMethodPrimitiveMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestMethodPrimitive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodPrimitiveMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethodPrimitive(::grpc::ClientContext* context, const ::Tests::Test1TestMethodPrimitiveMethodRequest* request, ::Tests::Test1TestMethodPrimitiveMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethodPrimitive(::grpc::ClientContext* context, const ::Tests::Test1TestMethodPrimitiveMethodRequest* request, ::Tests::Test1TestMethodPrimitiveMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethodPrimitive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodPrimitiveMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethodPrimitive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodPrimitiveMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InvokeTestMethodNoRequestOrResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest* request, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestMethodNoRequestOrResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethodNoRequestOrResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest* request, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethodNoRequestOrResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest* request, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethodNoRequestOrResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethodNoRequestOrResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InvokeTestMethodNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoResponseMethodRequest* request, ::Tests::Test1TestMethodNoResponseMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestMethodNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoResponseMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethodNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoResponseMethodRequest* request, ::Tests::Test1TestMethodNoResponseMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethodNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoResponseMethodRequest* request, ::Tests::Test1TestMethodNoResponseMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethodNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoResponseMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethodNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoResponseMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest* request, ::Tests::Test1PropStringSetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringSetResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest* request, ::Tests::Test1PropStringSetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest* request, ::Tests::Test1PropStringSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringSetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest* request, ::Tests::Test1PropStringGetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringGetResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest* request, ::Tests::Test1PropStringGetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest* request, ::Tests::Test1PropStringGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringGetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest* request, ::Tests::Test1PropComplexSetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexSetResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest* request, ::Tests::Test1PropComplexSetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest* request, ::Tests::Test1PropComplexSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexSetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest* request, ::Tests::Test1PropComplexGetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexGetResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest* request, ::Tests::Test1PropComplexGetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest* request, ::Tests::Test1PropComplexGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexGetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>* CreateRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>* AsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::google::protobuf::Any>* ListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>* AsyncListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>* PrepareAsyncListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodMethodResponse>* AsyncInvokeTestMethodRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodMethodResponse>* PrepareAsyncInvokeTestMethodRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodSyncMethodResponse>* AsyncInvokeTestMethodSyncRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodSyncMethodResponse>* PrepareAsyncInvokeTestMethodSyncRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodWithNoResponseMethodResponse>* AsyncInvokeTestMethodWithNoResponseRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodWithNoResponseMethodResponse>* PrepareAsyncInvokeTestMethodWithNoResponseRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodPrimitiveMethodResponse>* AsyncInvokeTestMethodPrimitiveRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodPrimitiveMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodPrimitiveMethodResponse>* PrepareAsyncInvokeTestMethodPrimitiveRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodPrimitiveMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse>* AsyncInvokeTestMethodNoRequestOrResponseRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse>* PrepareAsyncInvokeTestMethodNoRequestOrResponseRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoRequestMethodResponse>* AsyncInvokeTestMethodNoRequestRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoRequestMethodResponse>* PrepareAsyncInvokeTestMethodNoRequestRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoResponseMethodResponse>* AsyncInvokeTestMethodNoResponseRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1TestMethodNoResponseMethodResponse>* PrepareAsyncInvokeTestMethodNoResponseRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringSetResponse>* AsyncSetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringSetResponse>* PrepareAsyncSetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringGetResponse>* AsyncGetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropStringGetResponse>* PrepareAsyncGetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexSetResponse>* AsyncSetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexSetResponse>* PrepareAsyncSetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexGetResponse>* AsyncGetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test1PropComplexGetResponse>* PrepareAsyncGetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>> Create(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>>(CreateRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>> AsyncCreate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>>(AsyncCreateRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>> PrepareAsyncCreate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>>(PrepareAsyncCreateRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::google::protobuf::Any>> ListenEvents(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::google::protobuf::Any>>(ListenEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>> AsyncListenEvents(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>>(AsyncListenEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>> PrepareAsyncListenEvents(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>>(PrepareAsyncListenEventsRaw(context, request, cq));
    }
    ::grpc::Status InvokeTestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::Tests::Test1TestMethodMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodMethodResponse>> AsyncInvokeTestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodMethodResponse>>(AsyncInvokeTestMethodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodMethodResponse>> PrepareAsyncInvokeTestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodMethodResponse>>(PrepareAsyncInvokeTestMethodRaw(context, request, cq));
    }
    ::grpc::Status InvokeTestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::Tests::Test1TestMethodSyncMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodSyncMethodResponse>> AsyncInvokeTestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodSyncMethodResponse>>(AsyncInvokeTestMethodSyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodSyncMethodResponse>> PrepareAsyncInvokeTestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodSyncMethodResponse>>(PrepareAsyncInvokeTestMethodSyncRaw(context, request, cq));
    }
    ::grpc::Status InvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodWithNoResponseMethodResponse>> AsyncInvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodWithNoResponseMethodResponse>>(AsyncInvokeTestMethodWithNoResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodWithNoResponseMethodResponse>> PrepareAsyncInvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodWithNoResponseMethodResponse>>(PrepareAsyncInvokeTestMethodWithNoResponseRaw(context, request, cq));
    }
    ::grpc::Status InvokeTestMethodPrimitive(::grpc::ClientContext* context, const ::Tests::Test1TestMethodPrimitiveMethodRequest& request, ::Tests::Test1TestMethodPrimitiveMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodPrimitiveMethodResponse>> AsyncInvokeTestMethodPrimitive(::grpc::ClientContext* context, const ::Tests::Test1TestMethodPrimitiveMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodPrimitiveMethodResponse>>(AsyncInvokeTestMethodPrimitiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodPrimitiveMethodResponse>> PrepareAsyncInvokeTestMethodPrimitive(::grpc::ClientContext* context, const ::Tests::Test1TestMethodPrimitiveMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodPrimitiveMethodResponse>>(PrepareAsyncInvokeTestMethodPrimitiveRaw(context, request, cq));
    }
    ::grpc::Status InvokeTestMethodNoRequestOrResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest& request, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse>> AsyncInvokeTestMethodNoRequestOrResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse>>(AsyncInvokeTestMethodNoRequestOrResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse>> PrepareAsyncInvokeTestMethodNoRequestOrResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse>>(PrepareAsyncInvokeTestMethodNoRequestOrResponseRaw(context, request, cq));
    }
    ::grpc::Status InvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::Tests::Test1TestMethodNoRequestMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestMethodResponse>> AsyncInvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestMethodResponse>>(AsyncInvokeTestMethodNoRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestMethodResponse>> PrepareAsyncInvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestMethodResponse>>(PrepareAsyncInvokeTestMethodNoRequestRaw(context, request, cq));
    }
    ::grpc::Status InvokeTestMethodNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoResponseMethodRequest& request, ::Tests::Test1TestMethodNoResponseMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoResponseMethodResponse>> AsyncInvokeTestMethodNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoResponseMethodResponse>>(AsyncInvokeTestMethodNoResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoResponseMethodResponse>> PrepareAsyncInvokeTestMethodNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoResponseMethodResponse>>(PrepareAsyncInvokeTestMethodNoResponseRaw(context, request, cq));
    }
    ::grpc::Status SetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::Tests::Test1PropStringSetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringSetResponse>> AsyncSetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringSetResponse>>(AsyncSetPropertyPropStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringSetResponse>> PrepareAsyncSetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringSetResponse>>(PrepareAsyncSetPropertyPropStringRaw(context, request, cq));
    }
    ::grpc::Status GetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::Tests::Test1PropStringGetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringGetResponse>> AsyncGetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringGetResponse>>(AsyncGetPropertyPropStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringGetResponse>> PrepareAsyncGetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringGetResponse>>(PrepareAsyncGetPropertyPropStringRaw(context, request, cq));
    }
    ::grpc::Status SetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::Tests::Test1PropComplexSetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexSetResponse>> AsyncSetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexSetResponse>>(AsyncSetPropertyPropComplexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexSetResponse>> PrepareAsyncSetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexSetResponse>>(PrepareAsyncSetPropertyPropComplexRaw(context, request, cq));
    }
    ::grpc::Status GetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::Tests::Test1PropComplexGetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexGetResponse>> AsyncGetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexGetResponse>>(AsyncGetPropertyPropComplexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexGetResponse>> PrepareAsyncGetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexGetResponse>>(PrepareAsyncGetPropertyPropComplexRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Create(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::google::protobuf::Any,::google::protobuf::Any>* reactor) override;
      #else
      void Create(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::google::protobuf::Any,::google::protobuf::Any>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListenEvents(::grpc::ClientContext* context, ::Tests::Test1ListenEventStream* request, ::grpc::ClientReadReactor< ::google::protobuf::Any>* reactor) override;
      #else
      void ListenEvents(::grpc::ClientContext* context, ::Tests::Test1ListenEventStream* request, ::grpc::experimental::ClientReadReactor< ::google::protobuf::Any>* reactor) override;
      #endif
      void InvokeTestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest* request, ::Tests::Test1TestMethodMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestMethod(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest* request, ::Tests::Test1TestMethodMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethod(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest* request, ::Tests::Test1TestMethodMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethod(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethod(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InvokeTestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest* request, ::Tests::Test1TestMethodSyncMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestMethodSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodSyncMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest* request, ::Tests::Test1TestMethodSyncMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethodSync(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest* request, ::Tests::Test1TestMethodSyncMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethodSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodSyncMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethodSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodSyncMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethodWithNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InvokeTestMethodPrimitive(::grpc::ClientContext* context, const ::Tests::Test1TestMethodPrimitiveMethodRequest* request, ::Tests::Test1TestMethodPrimitiveMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestMethodPrimitive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodPrimitiveMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethodPrimitive(::grpc::ClientContext* context, const ::Tests::Test1TestMethodPrimitiveMethodRequest* request, ::Tests::Test1TestMethodPrimitiveMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethodPrimitive(::grpc::ClientContext* context, const ::Tests::Test1TestMethodPrimitiveMethodRequest* request, ::Tests::Test1TestMethodPrimitiveMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethodPrimitive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodPrimitiveMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethodPrimitive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodPrimitiveMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InvokeTestMethodNoRequestOrResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest* request, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestMethodNoRequestOrResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethodNoRequestOrResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest* request, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethodNoRequestOrResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest* request, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethodNoRequestOrResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethodNoRequestOrResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethodNoRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InvokeTestMethodNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoResponseMethodRequest* request, ::Tests::Test1TestMethodNoResponseMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestMethodNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoResponseMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethodNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoResponseMethodRequest* request, ::Tests::Test1TestMethodNoResponseMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethodNoResponse(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoResponseMethodRequest* request, ::Tests::Test1TestMethodNoResponseMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethodNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoResponseMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethodNoResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1TestMethodNoResponseMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest* request, ::Tests::Test1PropStringSetResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringSetResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest* request, ::Tests::Test1PropStringSetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest* request, ::Tests::Test1PropStringSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringSetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest* request, ::Tests::Test1PropStringGetResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringGetResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest* request, ::Tests::Test1PropStringGetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPropertyPropString(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest* request, ::Tests::Test1PropStringGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringGetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPropertyPropString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropStringGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest* request, ::Tests::Test1PropComplexSetResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexSetResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest* request, ::Tests::Test1PropComplexSetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest* request, ::Tests::Test1PropComplexSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexSetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest* request, ::Tests::Test1PropComplexGetResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexGetResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest* request, ::Tests::Test1PropComplexGetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPropertyPropComplex(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest* request, ::Tests::Test1PropComplexGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexGetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPropertyPropComplex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test1PropComplexGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* CreateRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* AsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::google::protobuf::Any>* ListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request) override;
    ::grpc::ClientAsyncReader< ::google::protobuf::Any>* AsyncListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::google::protobuf::Any>* PrepareAsyncListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test1ListenEventStream& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodMethodResponse>* AsyncInvokeTestMethodRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodMethodResponse>* PrepareAsyncInvokeTestMethodRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodSyncMethodResponse>* AsyncInvokeTestMethodSyncRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodSyncMethodResponse>* PrepareAsyncInvokeTestMethodSyncRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodSyncMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodWithNoResponseMethodResponse>* AsyncInvokeTestMethodWithNoResponseRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodWithNoResponseMethodResponse>* PrepareAsyncInvokeTestMethodWithNoResponseRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodPrimitiveMethodResponse>* AsyncInvokeTestMethodPrimitiveRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodPrimitiveMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodPrimitiveMethodResponse>* PrepareAsyncInvokeTestMethodPrimitiveRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodPrimitiveMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse>* AsyncInvokeTestMethodNoRequestOrResponseRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse>* PrepareAsyncInvokeTestMethodNoRequestOrResponseRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestMethodResponse>* AsyncInvokeTestMethodNoRequestRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoRequestMethodResponse>* PrepareAsyncInvokeTestMethodNoRequestRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoResponseMethodResponse>* AsyncInvokeTestMethodNoResponseRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1TestMethodNoResponseMethodResponse>* PrepareAsyncInvokeTestMethodNoResponseRaw(::grpc::ClientContext* context, const ::Tests::Test1TestMethodNoResponseMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringSetResponse>* AsyncSetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringSetResponse>* PrepareAsyncSetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringGetResponse>* AsyncGetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropStringGetResponse>* PrepareAsyncGetPropertyPropStringRaw(::grpc::ClientContext* context, const ::Tests::Test1PropStringGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexSetResponse>* AsyncSetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexSetResponse>* PrepareAsyncSetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexGetResponse>* AsyncGetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test1PropComplexGetResponse>* PrepareAsyncGetPropertyPropComplexRaw(::grpc::ClientContext* context, const ::Tests::Test1PropComplexGetRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_ListenEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestMethod_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestMethodSync_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestMethodWithNoResponse_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestMethodPrimitive_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestMethodNoRequestOrResponse_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestMethodNoRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestMethodNoResponse_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPropertyPropString_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPropertyPropString_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPropertyPropComplex_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPropertyPropComplex_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Create(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* stream);
    virtual ::grpc::Status ListenEvents(::grpc::ServerContext* context, const ::Tests::Test1ListenEventStream* request, ::grpc::ServerWriter< ::google::protobuf::Any>* writer);
    virtual ::grpc::Status InvokeTestMethod(::grpc::ServerContext* context, const ::Tests::Test1TestMethodMethodRequest* request, ::Tests::Test1TestMethodMethodResponse* response);
    virtual ::grpc::Status InvokeTestMethodSync(::grpc::ServerContext* context, const ::Tests::Test1TestMethodSyncMethodRequest* request, ::Tests::Test1TestMethodSyncMethodResponse* response);
    virtual ::grpc::Status InvokeTestMethodWithNoResponse(::grpc::ServerContext* context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response);
    virtual ::grpc::Status InvokeTestMethodPrimitive(::grpc::ServerContext* context, const ::Tests::Test1TestMethodPrimitiveMethodRequest* request, ::Tests::Test1TestMethodPrimitiveMethodResponse* response);
    virtual ::grpc::Status InvokeTestMethodNoRequestOrResponse(::grpc::ServerContext* context, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest* request, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* response);
    virtual ::grpc::Status InvokeTestMethodNoRequest(::grpc::ServerContext* context, const ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response);
    virtual ::grpc::Status InvokeTestMethodNoResponse(::grpc::ServerContext* context, const ::Tests::Test1TestMethodNoResponseMethodRequest* request, ::Tests::Test1TestMethodNoResponseMethodResponse* response);
    virtual ::grpc::Status SetPropertyPropString(::grpc::ServerContext* context, const ::Tests::Test1PropStringSetRequest* request, ::Tests::Test1PropStringSetResponse* response);
    virtual ::grpc::Status GetPropertyPropString(::grpc::ServerContext* context, const ::Tests::Test1PropStringGetRequest* request, ::Tests::Test1PropStringGetResponse* response);
    virtual ::grpc::Status SetPropertyPropComplex(::grpc::ServerContext* context, const ::Tests::Test1PropComplexSetRequest* request, ::Tests::Test1PropComplexSetResponse* response);
    virtual ::grpc::Status GetPropertyPropComplex(::grpc::ServerContext* context, const ::Tests::Test1PropComplexGetRequest* request, ::Tests::Test1PropComplexGetResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListenEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListenEvents() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListenEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenEvents(::grpc::ServerContext* /*context*/, const ::Tests::Test1ListenEventStream* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListenEvents(::grpc::ServerContext* context, ::Tests::Test1ListenEventStream* request, ::grpc::ServerAsyncWriter< ::google::protobuf::Any>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestMethod() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_InvokeTestMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethod(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodMethodRequest* /*request*/, ::Tests::Test1TestMethodMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethod(::grpc::ServerContext* context, ::Tests::Test1TestMethodMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test1TestMethodMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestMethodSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestMethodSync() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_InvokeTestMethodSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodSync(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodSyncMethodRequest* /*request*/, ::Tests::Test1TestMethodSyncMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethodSync(::grpc::ServerContext* context, ::Tests::Test1TestMethodSyncMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test1TestMethodSyncMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestMethodWithNoResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestMethodWithNoResponse() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_InvokeTestMethodWithNoResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodWithNoResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodWithNoResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethodWithNoResponse(::grpc::ServerContext* context, ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test1TestMethodWithNoResponseMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestMethodPrimitive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestMethodPrimitive() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_InvokeTestMethodPrimitive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodPrimitive(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodPrimitiveMethodRequest* /*request*/, ::Tests::Test1TestMethodPrimitiveMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethodPrimitive(::grpc::ServerContext* context, ::Tests::Test1TestMethodPrimitiveMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test1TestMethodPrimitiveMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestMethodNoRequestOrResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestMethodNoRequestOrResponse() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_InvokeTestMethodNoRequestOrResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoRequestOrResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethodNoRequestOrResponse(::grpc::ServerContext* context, ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestMethodNoRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestMethodNoRequest() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_InvokeTestMethodNoRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoRequest(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethodNoRequest(::grpc::ServerContext* context, ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test1TestMethodNoRequestMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestMethodNoResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestMethodNoResponse() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_InvokeTestMethodNoResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodNoResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethodNoResponse(::grpc::ServerContext* context, ::Tests::Test1TestMethodNoResponseMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test1TestMethodNoResponseMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPropertyPropString() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringSetRequest* /*request*/, ::Tests::Test1PropStringSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPropertyPropString(::grpc::ServerContext* context, ::Tests::Test1PropStringSetRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test1PropStringSetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPropertyPropString() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringGetRequest* /*request*/, ::Tests::Test1PropStringGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPropertyPropString(::grpc::ServerContext* context, ::Tests::Test1PropStringGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test1PropStringGetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPropertyPropComplex() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexSetRequest* /*request*/, ::Tests::Test1PropComplexSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPropertyPropComplex(::grpc::ServerContext* context, ::Tests::Test1PropComplexSetRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test1PropComplexSetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPropertyPropComplex() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexGetRequest* /*request*/, ::Tests::Test1PropComplexGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPropertyPropComplex(::grpc::ServerContext* context, ::Tests::Test1PropComplexGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test1PropComplexGetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_ListenEvents<WithAsyncMethod_InvokeTestMethod<WithAsyncMethod_InvokeTestMethodSync<WithAsyncMethod_InvokeTestMethodWithNoResponse<WithAsyncMethod_InvokeTestMethodPrimitive<WithAsyncMethod_InvokeTestMethodNoRequestOrResponse<WithAsyncMethod_InvokeTestMethodNoRequest<WithAsyncMethod_InvokeTestMethodNoResponse<WithAsyncMethod_SetPropertyPropString<WithAsyncMethod_GetPropertyPropString<WithAsyncMethod_SetPropertyPropComplex<WithAsyncMethod_GetPropertyPropComplex<Service > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Create() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackBidiHandler< ::google::protobuf::Any, ::google::protobuf::Any>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->Create(context); }));
    }
    ~ExperimentalWithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::google::protobuf::Any, ::google::protobuf::Any>* Create(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::google::protobuf::Any, ::google::protobuf::Any>* Create(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListenEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListenEvents() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::Tests::Test1ListenEventStream, ::google::protobuf::Any>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1ListenEventStream* request) { return this->ListenEvents(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_ListenEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenEvents(::grpc::ServerContext* /*context*/, const ::Tests::Test1ListenEventStream* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::google::protobuf::Any>* ListenEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1ListenEventStream* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::google::protobuf::Any>* ListenEvents(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1ListenEventStream* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestMethod() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodMethodRequest, ::Tests::Test1TestMethodMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1TestMethodMethodRequest* request, ::Tests::Test1TestMethodMethodResponse* response) { return this->InvokeTestMethod(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestMethod(
        ::grpc::experimental::MessageAllocator< ::Tests::Test1TestMethodMethodRequest, ::Tests::Test1TestMethodMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodMethodRequest, ::Tests::Test1TestMethodMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethod(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodMethodRequest* /*request*/, ::Tests::Test1TestMethodMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethod(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodMethodRequest* /*request*/, ::Tests::Test1TestMethodMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethod(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodMethodRequest* /*request*/, ::Tests::Test1TestMethodMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestMethodSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestMethodSync() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodSyncMethodRequest, ::Tests::Test1TestMethodSyncMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1TestMethodSyncMethodRequest* request, ::Tests::Test1TestMethodSyncMethodResponse* response) { return this->InvokeTestMethodSync(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestMethodSync(
        ::grpc::experimental::MessageAllocator< ::Tests::Test1TestMethodSyncMethodRequest, ::Tests::Test1TestMethodSyncMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodSyncMethodRequest, ::Tests::Test1TestMethodSyncMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestMethodSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodSync(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodSyncMethodRequest* /*request*/, ::Tests::Test1TestMethodSyncMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethodSync(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodSyncMethodRequest* /*request*/, ::Tests::Test1TestMethodSyncMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethodSync(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodSyncMethodRequest* /*request*/, ::Tests::Test1TestMethodSyncMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestMethodWithNoResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestMethodWithNoResponse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodWithNoResponseMethodRequest, ::Tests::Test1TestMethodWithNoResponseMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* request, ::Tests::Test1TestMethodWithNoResponseMethodResponse* response) { return this->InvokeTestMethodWithNoResponse(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestMethodWithNoResponse(
        ::grpc::experimental::MessageAllocator< ::Tests::Test1TestMethodWithNoResponseMethodRequest, ::Tests::Test1TestMethodWithNoResponseMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodWithNoResponseMethodRequest, ::Tests::Test1TestMethodWithNoResponseMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestMethodWithNoResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodWithNoResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodWithNoResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethodWithNoResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodWithNoResponseMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethodWithNoResponse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodWithNoResponseMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestMethodPrimitive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestMethodPrimitive() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodPrimitiveMethodRequest, ::Tests::Test1TestMethodPrimitiveMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1TestMethodPrimitiveMethodRequest* request, ::Tests::Test1TestMethodPrimitiveMethodResponse* response) { return this->InvokeTestMethodPrimitive(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestMethodPrimitive(
        ::grpc::experimental::MessageAllocator< ::Tests::Test1TestMethodPrimitiveMethodRequest, ::Tests::Test1TestMethodPrimitiveMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodPrimitiveMethodRequest, ::Tests::Test1TestMethodPrimitiveMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestMethodPrimitive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodPrimitive(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodPrimitiveMethodRequest* /*request*/, ::Tests::Test1TestMethodPrimitiveMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethodPrimitive(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodPrimitiveMethodRequest* /*request*/, ::Tests::Test1TestMethodPrimitiveMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethodPrimitive(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodPrimitiveMethodRequest* /*request*/, ::Tests::Test1TestMethodPrimitiveMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestMethodNoRequestOrResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestMethodNoRequestOrResponse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest* request, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* response) { return this->InvokeTestMethodNoRequestOrResponse(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestMethodNoRequestOrResponse(
        ::grpc::experimental::MessageAllocator< ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestMethodNoRequestOrResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoRequestOrResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethodNoRequestOrResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethodNoRequestOrResponse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestMethodNoRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestMethodNoRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodNoRequestMethodRequest, ::Tests::Test1TestMethodNoRequestMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1TestMethodNoRequestMethodRequest* request, ::Tests::Test1TestMethodNoRequestMethodResponse* response) { return this->InvokeTestMethodNoRequest(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestMethodNoRequest(
        ::grpc::experimental::MessageAllocator< ::Tests::Test1TestMethodNoRequestMethodRequest, ::Tests::Test1TestMethodNoRequestMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodNoRequestMethodRequest, ::Tests::Test1TestMethodNoRequestMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestMethodNoRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoRequest(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethodNoRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethodNoRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestMethodNoResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestMethodNoResponse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodNoResponseMethodRequest, ::Tests::Test1TestMethodNoResponseMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1TestMethodNoResponseMethodRequest* request, ::Tests::Test1TestMethodNoResponseMethodResponse* response) { return this->InvokeTestMethodNoResponse(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestMethodNoResponse(
        ::grpc::experimental::MessageAllocator< ::Tests::Test1TestMethodNoResponseMethodRequest, ::Tests::Test1TestMethodNoResponseMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1TestMethodNoResponseMethodRequest, ::Tests::Test1TestMethodNoResponseMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestMethodNoResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodNoResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethodNoResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodNoResponseMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethodNoResponse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1TestMethodNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodNoResponseMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetPropertyPropString() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1PropStringSetRequest, ::Tests::Test1PropStringSetResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1PropStringSetRequest* request, ::Tests::Test1PropStringSetResponse* response) { return this->SetPropertyPropString(context, request, response); }));}
    void SetMessageAllocatorFor_SetPropertyPropString(
        ::grpc::experimental::MessageAllocator< ::Tests::Test1PropStringSetRequest, ::Tests::Test1PropStringSetResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1PropStringSetRequest, ::Tests::Test1PropStringSetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringSetRequest* /*request*/, ::Tests::Test1PropStringSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPropertyPropString(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1PropStringSetRequest* /*request*/, ::Tests::Test1PropStringSetResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPropertyPropString(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1PropStringSetRequest* /*request*/, ::Tests::Test1PropStringSetResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPropertyPropString() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1PropStringGetRequest, ::Tests::Test1PropStringGetResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1PropStringGetRequest* request, ::Tests::Test1PropStringGetResponse* response) { return this->GetPropertyPropString(context, request, response); }));}
    void SetMessageAllocatorFor_GetPropertyPropString(
        ::grpc::experimental::MessageAllocator< ::Tests::Test1PropStringGetRequest, ::Tests::Test1PropStringGetResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1PropStringGetRequest, ::Tests::Test1PropStringGetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringGetRequest* /*request*/, ::Tests::Test1PropStringGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPropertyPropString(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1PropStringGetRequest* /*request*/, ::Tests::Test1PropStringGetResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPropertyPropString(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1PropStringGetRequest* /*request*/, ::Tests::Test1PropStringGetResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetPropertyPropComplex() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1PropComplexSetRequest, ::Tests::Test1PropComplexSetResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1PropComplexSetRequest* request, ::Tests::Test1PropComplexSetResponse* response) { return this->SetPropertyPropComplex(context, request, response); }));}
    void SetMessageAllocatorFor_SetPropertyPropComplex(
        ::grpc::experimental::MessageAllocator< ::Tests::Test1PropComplexSetRequest, ::Tests::Test1PropComplexSetResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1PropComplexSetRequest, ::Tests::Test1PropComplexSetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexSetRequest* /*request*/, ::Tests::Test1PropComplexSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPropertyPropComplex(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1PropComplexSetRequest* /*request*/, ::Tests::Test1PropComplexSetResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPropertyPropComplex(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1PropComplexSetRequest* /*request*/, ::Tests::Test1PropComplexSetResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPropertyPropComplex() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1PropComplexGetRequest, ::Tests::Test1PropComplexGetResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test1PropComplexGetRequest* request, ::Tests::Test1PropComplexGetResponse* response) { return this->GetPropertyPropComplex(context, request, response); }));}
    void SetMessageAllocatorFor_GetPropertyPropComplex(
        ::grpc::experimental::MessageAllocator< ::Tests::Test1PropComplexGetRequest, ::Tests::Test1PropComplexGetResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test1PropComplexGetRequest, ::Tests::Test1PropComplexGetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexGetRequest* /*request*/, ::Tests::Test1PropComplexGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPropertyPropComplex(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test1PropComplexGetRequest* /*request*/, ::Tests::Test1PropComplexGetResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPropertyPropComplex(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test1PropComplexGetRequest* /*request*/, ::Tests::Test1PropComplexGetResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_ListenEvents<ExperimentalWithCallbackMethod_InvokeTestMethod<ExperimentalWithCallbackMethod_InvokeTestMethodSync<ExperimentalWithCallbackMethod_InvokeTestMethodWithNoResponse<ExperimentalWithCallbackMethod_InvokeTestMethodPrimitive<ExperimentalWithCallbackMethod_InvokeTestMethodNoRequestOrResponse<ExperimentalWithCallbackMethod_InvokeTestMethodNoRequest<ExperimentalWithCallbackMethod_InvokeTestMethodNoResponse<ExperimentalWithCallbackMethod_SetPropertyPropString<ExperimentalWithCallbackMethod_GetPropertyPropString<ExperimentalWithCallbackMethod_SetPropertyPropComplex<ExperimentalWithCallbackMethod_GetPropertyPropComplex<Service > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_ListenEvents<ExperimentalWithCallbackMethod_InvokeTestMethod<ExperimentalWithCallbackMethod_InvokeTestMethodSync<ExperimentalWithCallbackMethod_InvokeTestMethodWithNoResponse<ExperimentalWithCallbackMethod_InvokeTestMethodPrimitive<ExperimentalWithCallbackMethod_InvokeTestMethodNoRequestOrResponse<ExperimentalWithCallbackMethod_InvokeTestMethodNoRequest<ExperimentalWithCallbackMethod_InvokeTestMethodNoResponse<ExperimentalWithCallbackMethod_SetPropertyPropString<ExperimentalWithCallbackMethod_GetPropertyPropString<ExperimentalWithCallbackMethod_SetPropertyPropComplex<ExperimentalWithCallbackMethod_GetPropertyPropComplex<Service > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListenEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListenEvents() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListenEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenEvents(::grpc::ServerContext* /*context*/, const ::Tests::Test1ListenEventStream* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestMethod() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_InvokeTestMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethod(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodMethodRequest* /*request*/, ::Tests::Test1TestMethodMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestMethodSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestMethodSync() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_InvokeTestMethodSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodSync(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodSyncMethodRequest* /*request*/, ::Tests::Test1TestMethodSyncMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestMethodWithNoResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestMethodWithNoResponse() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_InvokeTestMethodWithNoResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodWithNoResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodWithNoResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestMethodPrimitive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestMethodPrimitive() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_InvokeTestMethodPrimitive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodPrimitive(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodPrimitiveMethodRequest* /*request*/, ::Tests::Test1TestMethodPrimitiveMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestMethodNoRequestOrResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestMethodNoRequestOrResponse() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_InvokeTestMethodNoRequestOrResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoRequestOrResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestMethodNoRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestMethodNoRequest() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_InvokeTestMethodNoRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoRequest(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestMethodNoResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestMethodNoResponse() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_InvokeTestMethodNoResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodNoResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPropertyPropString() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringSetRequest* /*request*/, ::Tests::Test1PropStringSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPropertyPropString() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringGetRequest* /*request*/, ::Tests::Test1PropStringGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPropertyPropComplex() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexSetRequest* /*request*/, ::Tests::Test1PropComplexSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPropertyPropComplex() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexGetRequest* /*request*/, ::Tests::Test1PropComplexGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListenEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListenEvents() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListenEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenEvents(::grpc::ServerContext* /*context*/, const ::Tests::Test1ListenEventStream* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListenEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestMethod() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_InvokeTestMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethod(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodMethodRequest* /*request*/, ::Tests::Test1TestMethodMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethod(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestMethodSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestMethodSync() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_InvokeTestMethodSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodSync(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodSyncMethodRequest* /*request*/, ::Tests::Test1TestMethodSyncMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethodSync(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestMethodWithNoResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestMethodWithNoResponse() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_InvokeTestMethodWithNoResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodWithNoResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodWithNoResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethodWithNoResponse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestMethodPrimitive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestMethodPrimitive() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_InvokeTestMethodPrimitive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodPrimitive(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodPrimitiveMethodRequest* /*request*/, ::Tests::Test1TestMethodPrimitiveMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethodPrimitive(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestMethodNoRequestOrResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestMethodNoRequestOrResponse() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_InvokeTestMethodNoRequestOrResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoRequestOrResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethodNoRequestOrResponse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestMethodNoRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestMethodNoRequest() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_InvokeTestMethodNoRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoRequest(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethodNoRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestMethodNoResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestMethodNoResponse() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_InvokeTestMethodNoResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodNoResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethodNoResponse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPropertyPropString() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringSetRequest* /*request*/, ::Tests::Test1PropStringSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPropertyPropString(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPropertyPropString() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringGetRequest* /*request*/, ::Tests::Test1PropStringGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPropertyPropString(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPropertyPropComplex() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_SetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexSetRequest* /*request*/, ::Tests::Test1PropComplexSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPropertyPropComplex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPropertyPropComplex() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexGetRequest* /*request*/, ::Tests::Test1PropComplexGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPropertyPropComplex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Create() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->Create(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Create(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Create(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListenEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListenEvents() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->ListenEvents(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListenEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenEvents(::grpc::ServerContext* /*context*/, const ::Tests::Test1ListenEventStream* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ListenEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* ListenEvents(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestMethod() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestMethod(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethod(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodMethodRequest* /*request*/, ::Tests::Test1TestMethodMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethod(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethod(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestMethodSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestMethodSync() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestMethodSync(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestMethodSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodSync(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodSyncMethodRequest* /*request*/, ::Tests::Test1TestMethodSyncMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethodSync(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethodSync(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestMethodWithNoResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestMethodWithNoResponse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestMethodWithNoResponse(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestMethodWithNoResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodWithNoResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodWithNoResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethodWithNoResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethodWithNoResponse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestMethodPrimitive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestMethodPrimitive() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestMethodPrimitive(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestMethodPrimitive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodPrimitive(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodPrimitiveMethodRequest* /*request*/, ::Tests::Test1TestMethodPrimitiveMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethodPrimitive(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethodPrimitive(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestMethodNoRequestOrResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestMethodNoRequestOrResponse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestMethodNoRequestOrResponse(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestMethodNoRequestOrResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoRequestOrResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethodNoRequestOrResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethodNoRequestOrResponse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestMethodNoRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestMethodNoRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestMethodNoRequest(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestMethodNoRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoRequest(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethodNoRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethodNoRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestMethodNoResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestMethodNoResponse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestMethodNoResponse(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestMethodNoResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodNoResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethodNoResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethodNoResponse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetPropertyPropString() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPropertyPropString(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringSetRequest* /*request*/, ::Tests::Test1PropStringSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPropertyPropString(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPropertyPropString(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPropertyPropString() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPropertyPropString(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringGetRequest* /*request*/, ::Tests::Test1PropStringGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPropertyPropString(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPropertyPropString(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetPropertyPropComplex() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPropertyPropComplex(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexSetRequest* /*request*/, ::Tests::Test1PropComplexSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPropertyPropComplex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPropertyPropComplex(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPropertyPropComplex() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPropertyPropComplex(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexGetRequest* /*request*/, ::Tests::Test1PropComplexGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPropertyPropComplex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPropertyPropComplex(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestMethod() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test1TestMethodMethodRequest, ::Tests::Test1TestMethodMethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestMethod<BaseClass>::StreamedInvokeTestMethod, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestMethod(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodMethodRequest* /*request*/, ::Tests::Test1TestMethodMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestMethod(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test1TestMethodMethodRequest,::Tests::Test1TestMethodMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestMethodSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestMethodSync() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test1TestMethodSyncMethodRequest, ::Tests::Test1TestMethodSyncMethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestMethodSync<BaseClass>::StreamedInvokeTestMethodSync, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestMethodSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestMethodSync(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodSyncMethodRequest* /*request*/, ::Tests::Test1TestMethodSyncMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestMethodSync(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test1TestMethodSyncMethodRequest,::Tests::Test1TestMethodSyncMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestMethodWithNoResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestMethodWithNoResponse() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test1TestMethodWithNoResponseMethodRequest, ::Tests::Test1TestMethodWithNoResponseMethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestMethodWithNoResponse<BaseClass>::StreamedInvokeTestMethodWithNoResponse, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestMethodWithNoResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestMethodWithNoResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodWithNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodWithNoResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestMethodWithNoResponse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test1TestMethodWithNoResponseMethodRequest,::Tests::Test1TestMethodWithNoResponseMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestMethodPrimitive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestMethodPrimitive() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test1TestMethodPrimitiveMethodRequest, ::Tests::Test1TestMethodPrimitiveMethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestMethodPrimitive<BaseClass>::StreamedInvokeTestMethodPrimitive, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestMethodPrimitive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestMethodPrimitive(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodPrimitiveMethodRequest* /*request*/, ::Tests::Test1TestMethodPrimitiveMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestMethodPrimitive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test1TestMethodPrimitiveMethodRequest,::Tests::Test1TestMethodPrimitiveMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestMethodNoRequestOrResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestMethodNoRequestOrResponse() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestMethodNoRequestOrResponse<BaseClass>::StreamedInvokeTestMethodNoRequestOrResponse, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestMethodNoRequestOrResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestMethodNoRequestOrResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestOrResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestMethodNoRequestOrResponse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test1TestMethodNoRequestOrResponseMethodRequest,::Tests::Test1TestMethodNoRequestOrResponseMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestMethodNoRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestMethodNoRequest() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test1TestMethodNoRequestMethodRequest, ::Tests::Test1TestMethodNoRequestMethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestMethodNoRequest<BaseClass>::StreamedInvokeTestMethodNoRequest, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestMethodNoRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestMethodNoRequest(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoRequestMethodRequest* /*request*/, ::Tests::Test1TestMethodNoRequestMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestMethodNoRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test1TestMethodNoRequestMethodRequest,::Tests::Test1TestMethodNoRequestMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestMethodNoResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestMethodNoResponse() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test1TestMethodNoResponseMethodRequest, ::Tests::Test1TestMethodNoResponseMethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestMethodNoResponse<BaseClass>::StreamedInvokeTestMethodNoResponse, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestMethodNoResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestMethodNoResponse(::grpc::ServerContext* /*context*/, const ::Tests::Test1TestMethodNoResponseMethodRequest* /*request*/, ::Tests::Test1TestMethodNoResponseMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestMethodNoResponse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test1TestMethodNoResponseMethodRequest,::Tests::Test1TestMethodNoResponseMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPropertyPropString() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test1PropStringSetRequest, ::Tests::Test1PropStringSetResponse>(std::bind(&WithStreamedUnaryMethod_SetPropertyPropString<BaseClass>::StreamedSetPropertyPropString, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringSetRequest* /*request*/, ::Tests::Test1PropStringSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPropertyPropString(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test1PropStringSetRequest,::Tests::Test1PropStringSetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPropertyPropString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPropertyPropString() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test1PropStringGetRequest, ::Tests::Test1PropStringGetResponse>(std::bind(&WithStreamedUnaryMethod_GetPropertyPropString<BaseClass>::StreamedGetPropertyPropString, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPropertyPropString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPropertyPropString(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropStringGetRequest* /*request*/, ::Tests::Test1PropStringGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPropertyPropString(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test1PropStringGetRequest,::Tests::Test1PropStringGetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPropertyPropComplex() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test1PropComplexSetRequest, ::Tests::Test1PropComplexSetResponse>(std::bind(&WithStreamedUnaryMethod_SetPropertyPropComplex<BaseClass>::StreamedSetPropertyPropComplex, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexSetRequest* /*request*/, ::Tests::Test1PropComplexSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPropertyPropComplex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test1PropComplexSetRequest,::Tests::Test1PropComplexSetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPropertyPropComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPropertyPropComplex() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test1PropComplexGetRequest, ::Tests::Test1PropComplexGetResponse>(std::bind(&WithStreamedUnaryMethod_GetPropertyPropComplex<BaseClass>::StreamedGetPropertyPropComplex, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPropertyPropComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPropertyPropComplex(::grpc::ServerContext* /*context*/, const ::Tests::Test1PropComplexGetRequest* /*request*/, ::Tests::Test1PropComplexGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPropertyPropComplex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test1PropComplexGetRequest,::Tests::Test1PropComplexGetResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_InvokeTestMethod<WithStreamedUnaryMethod_InvokeTestMethodSync<WithStreamedUnaryMethod_InvokeTestMethodWithNoResponse<WithStreamedUnaryMethod_InvokeTestMethodPrimitive<WithStreamedUnaryMethod_InvokeTestMethodNoRequestOrResponse<WithStreamedUnaryMethod_InvokeTestMethodNoRequest<WithStreamedUnaryMethod_InvokeTestMethodNoResponse<WithStreamedUnaryMethod_SetPropertyPropString<WithStreamedUnaryMethod_GetPropertyPropString<WithStreamedUnaryMethod_SetPropertyPropComplex<WithStreamedUnaryMethod_GetPropertyPropComplex<Service > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ListenEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ListenEvents() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::Tests::Test1ListenEventStream, ::google::protobuf::Any>(std::bind(&WithSplitStreamingMethod_ListenEvents<BaseClass>::StreamedListenEvents, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ListenEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListenEvents(::grpc::ServerContext* /*context*/, const ::Tests::Test1ListenEventStream* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListenEvents(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Tests::Test1ListenEventStream,::google::protobuf::Any>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ListenEvents<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_ListenEvents<WithStreamedUnaryMethod_InvokeTestMethod<WithStreamedUnaryMethod_InvokeTestMethodSync<WithStreamedUnaryMethod_InvokeTestMethodWithNoResponse<WithStreamedUnaryMethod_InvokeTestMethodPrimitive<WithStreamedUnaryMethod_InvokeTestMethodNoRequestOrResponse<WithStreamedUnaryMethod_InvokeTestMethodNoRequest<WithStreamedUnaryMethod_InvokeTestMethodNoResponse<WithStreamedUnaryMethod_SetPropertyPropString<WithStreamedUnaryMethod_GetPropertyPropString<WithStreamedUnaryMethod_SetPropertyPropComplex<WithStreamedUnaryMethod_GetPropertyPropComplex<Service > > > > > > > > > > > > StreamedService;
};

class Test2ObjectService final {
 public:
  static constexpr char const* service_full_name() {
    return "Tests.Test2ObjectService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>> Create(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>>(CreateRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>> AsyncCreate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>>(AsyncCreateRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>> PrepareAsyncCreate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>>(PrepareAsyncCreateRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::google::protobuf::Any>> ListenEvents(::grpc::ClientContext* context, const ::Tests::Test2ListenEventStream& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::google::protobuf::Any>>(ListenEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>> AsyncListenEvents(::grpc::ClientContext* context, const ::Tests::Test2ListenEventStream& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>>(AsyncListenEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>> PrepareAsyncListenEvents(::grpc::ClientContext* context, const ::Tests::Test2ListenEventStream& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>>(PrepareAsyncListenEventsRaw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestMethod2(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest& request, ::Tests::Test2TestMethod2MethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethod2MethodResponse>> AsyncInvokeTestMethod2(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethod2MethodResponse>>(AsyncInvokeTestMethod2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethod2MethodResponse>> PrepareAsyncInvokeTestMethod2(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethod2MethodResponse>>(PrepareAsyncInvokeTestMethod2Raw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestMethodSync2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest& request, ::Tests::Test2TestMethodSync2MethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethodSync2MethodResponse>> AsyncInvokeTestMethodSync2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethodSync2MethodResponse>>(AsyncInvokeTestMethodSync2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethodSync2MethodResponse>> PrepareAsyncInvokeTestMethodSync2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethodSync2MethodResponse>>(PrepareAsyncInvokeTestMethodSync2Raw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest& request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethodWithNoResponse2MethodResponse>> AsyncInvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethodWithNoResponse2MethodResponse>>(AsyncInvokeTestMethodWithNoResponse2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethodWithNoResponse2MethodResponse>> PrepareAsyncInvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethodWithNoResponse2MethodResponse>>(PrepareAsyncInvokeTestMethodWithNoResponse2Raw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest& request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethodNoRequest2MethodResponse>> AsyncInvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethodNoRequest2MethodResponse>>(AsyncInvokeTestMethodNoRequest2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethodNoRequest2MethodResponse>> PrepareAsyncInvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethodNoRequest2MethodResponse>>(PrepareAsyncInvokeTestMethodNoRequest2Raw(context, request, cq));
    }
    virtual ::grpc::Status SetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest& request, ::Tests::Test2PropString2SetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropString2SetResponse>> AsyncSetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropString2SetResponse>>(AsyncSetPropertyPropString2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropString2SetResponse>> PrepareAsyncSetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropString2SetResponse>>(PrepareAsyncSetPropertyPropString2Raw(context, request, cq));
    }
    virtual ::grpc::Status GetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest& request, ::Tests::Test2PropString2GetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropString2GetResponse>> AsyncGetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropString2GetResponse>>(AsyncGetPropertyPropString2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropString2GetResponse>> PrepareAsyncGetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropString2GetResponse>>(PrepareAsyncGetPropertyPropString2Raw(context, request, cq));
    }
    virtual ::grpc::Status SetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest& request, ::Tests::Test2PropComplex2SetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropComplex2SetResponse>> AsyncSetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropComplex2SetResponse>>(AsyncSetPropertyPropComplex2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropComplex2SetResponse>> PrepareAsyncSetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropComplex2SetResponse>>(PrepareAsyncSetPropertyPropComplex2Raw(context, request, cq));
    }
    virtual ::grpc::Status GetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest& request, ::Tests::Test2PropComplex2GetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropComplex2GetResponse>> AsyncGetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropComplex2GetResponse>>(AsyncGetPropertyPropComplex2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropComplex2GetResponse>> PrepareAsyncGetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropComplex2GetResponse>>(PrepareAsyncGetPropertyPropComplex2Raw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Create(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::google::protobuf::Any,::google::protobuf::Any>* reactor) = 0;
      #else
      virtual void Create(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::google::protobuf::Any,::google::protobuf::Any>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListenEvents(::grpc::ClientContext* context, ::Tests::Test2ListenEventStream* request, ::grpc::ClientReadReactor< ::google::protobuf::Any>* reactor) = 0;
      #else
      virtual void ListenEvents(::grpc::ClientContext* context, ::Tests::Test2ListenEventStream* request, ::grpc::experimental::ClientReadReactor< ::google::protobuf::Any>* reactor) = 0;
      #endif
      virtual void InvokeTestMethod2(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest* request, ::Tests::Test2TestMethod2MethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestMethod2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethod2MethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethod2(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest* request, ::Tests::Test2TestMethod2MethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethod2(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest* request, ::Tests::Test2TestMethod2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethod2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethod2MethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethod2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethod2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InvokeTestMethodSync2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest* request, ::Tests::Test2TestMethodSync2MethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestMethodSync2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodSync2MethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethodSync2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest* request, ::Tests::Test2TestMethodSync2MethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethodSync2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest* request, ::Tests::Test2TestMethodSync2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethodSync2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodSync2MethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethodSync2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodSync2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest* request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest* request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest* request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest* request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest* request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest* request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest* request, ::Tests::Test2PropString2SetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPropertyPropString2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropString2SetResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest* request, ::Tests::Test2PropString2SetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest* request, ::Tests::Test2PropString2SetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPropertyPropString2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropString2SetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPropertyPropString2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropString2SetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest* request, ::Tests::Test2PropString2GetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPropertyPropString2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropString2GetResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest* request, ::Tests::Test2PropString2GetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest* request, ::Tests::Test2PropString2GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPropertyPropString2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropString2GetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPropertyPropString2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropString2GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest* request, ::Tests::Test2PropComplex2SetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPropertyPropComplex2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropComplex2SetResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest* request, ::Tests::Test2PropComplex2SetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest* request, ::Tests::Test2PropComplex2SetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPropertyPropComplex2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropComplex2SetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPropertyPropComplex2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropComplex2SetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest* request, ::Tests::Test2PropComplex2GetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPropertyPropComplex2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropComplex2GetResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest* request, ::Tests::Test2PropComplex2GetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest* request, ::Tests::Test2PropComplex2GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPropertyPropComplex2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropComplex2GetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPropertyPropComplex2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropComplex2GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>* CreateRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>* AsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::google::protobuf::Any>* ListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test2ListenEventStream& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>* AsyncListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test2ListenEventStream& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>* PrepareAsyncListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test2ListenEventStream& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethod2MethodResponse>* AsyncInvokeTestMethod2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethod2MethodResponse>* PrepareAsyncInvokeTestMethod2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethodSync2MethodResponse>* AsyncInvokeTestMethodSync2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethodSync2MethodResponse>* PrepareAsyncInvokeTestMethodSync2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethodWithNoResponse2MethodResponse>* AsyncInvokeTestMethodWithNoResponse2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethodWithNoResponse2MethodResponse>* PrepareAsyncInvokeTestMethodWithNoResponse2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethodNoRequest2MethodResponse>* AsyncInvokeTestMethodNoRequest2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2TestMethodNoRequest2MethodResponse>* PrepareAsyncInvokeTestMethodNoRequest2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropString2SetResponse>* AsyncSetPropertyPropString2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropString2SetResponse>* PrepareAsyncSetPropertyPropString2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropString2GetResponse>* AsyncGetPropertyPropString2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropString2GetResponse>* PrepareAsyncGetPropertyPropString2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropComplex2SetResponse>* AsyncSetPropertyPropComplex2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropComplex2SetResponse>* PrepareAsyncSetPropertyPropComplex2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropComplex2GetResponse>* AsyncGetPropertyPropComplex2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::Test2PropComplex2GetResponse>* PrepareAsyncGetPropertyPropComplex2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>> Create(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>>(CreateRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>> AsyncCreate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>>(AsyncCreateRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>> PrepareAsyncCreate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>>(PrepareAsyncCreateRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::google::protobuf::Any>> ListenEvents(::grpc::ClientContext* context, const ::Tests::Test2ListenEventStream& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::google::protobuf::Any>>(ListenEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>> AsyncListenEvents(::grpc::ClientContext* context, const ::Tests::Test2ListenEventStream& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>>(AsyncListenEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>> PrepareAsyncListenEvents(::grpc::ClientContext* context, const ::Tests::Test2ListenEventStream& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>>(PrepareAsyncListenEventsRaw(context, request, cq));
    }
    ::grpc::Status InvokeTestMethod2(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest& request, ::Tests::Test2TestMethod2MethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethod2MethodResponse>> AsyncInvokeTestMethod2(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethod2MethodResponse>>(AsyncInvokeTestMethod2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethod2MethodResponse>> PrepareAsyncInvokeTestMethod2(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethod2MethodResponse>>(PrepareAsyncInvokeTestMethod2Raw(context, request, cq));
    }
    ::grpc::Status InvokeTestMethodSync2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest& request, ::Tests::Test2TestMethodSync2MethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodSync2MethodResponse>> AsyncInvokeTestMethodSync2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodSync2MethodResponse>>(AsyncInvokeTestMethodSync2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodSync2MethodResponse>> PrepareAsyncInvokeTestMethodSync2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodSync2MethodResponse>>(PrepareAsyncInvokeTestMethodSync2Raw(context, request, cq));
    }
    ::grpc::Status InvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest& request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodWithNoResponse2MethodResponse>> AsyncInvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodWithNoResponse2MethodResponse>>(AsyncInvokeTestMethodWithNoResponse2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodWithNoResponse2MethodResponse>> PrepareAsyncInvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodWithNoResponse2MethodResponse>>(PrepareAsyncInvokeTestMethodWithNoResponse2Raw(context, request, cq));
    }
    ::grpc::Status InvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest& request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodNoRequest2MethodResponse>> AsyncInvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodNoRequest2MethodResponse>>(AsyncInvokeTestMethodNoRequest2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodNoRequest2MethodResponse>> PrepareAsyncInvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodNoRequest2MethodResponse>>(PrepareAsyncInvokeTestMethodNoRequest2Raw(context, request, cq));
    }
    ::grpc::Status SetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest& request, ::Tests::Test2PropString2SetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropString2SetResponse>> AsyncSetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropString2SetResponse>>(AsyncSetPropertyPropString2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropString2SetResponse>> PrepareAsyncSetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropString2SetResponse>>(PrepareAsyncSetPropertyPropString2Raw(context, request, cq));
    }
    ::grpc::Status GetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest& request, ::Tests::Test2PropString2GetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropString2GetResponse>> AsyncGetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropString2GetResponse>>(AsyncGetPropertyPropString2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropString2GetResponse>> PrepareAsyncGetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropString2GetResponse>>(PrepareAsyncGetPropertyPropString2Raw(context, request, cq));
    }
    ::grpc::Status SetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest& request, ::Tests::Test2PropComplex2SetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropComplex2SetResponse>> AsyncSetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropComplex2SetResponse>>(AsyncSetPropertyPropComplex2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropComplex2SetResponse>> PrepareAsyncSetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropComplex2SetResponse>>(PrepareAsyncSetPropertyPropComplex2Raw(context, request, cq));
    }
    ::grpc::Status GetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest& request, ::Tests::Test2PropComplex2GetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropComplex2GetResponse>> AsyncGetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropComplex2GetResponse>>(AsyncGetPropertyPropComplex2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropComplex2GetResponse>> PrepareAsyncGetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropComplex2GetResponse>>(PrepareAsyncGetPropertyPropComplex2Raw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Create(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::google::protobuf::Any,::google::protobuf::Any>* reactor) override;
      #else
      void Create(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::google::protobuf::Any,::google::protobuf::Any>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListenEvents(::grpc::ClientContext* context, ::Tests::Test2ListenEventStream* request, ::grpc::ClientReadReactor< ::google::protobuf::Any>* reactor) override;
      #else
      void ListenEvents(::grpc::ClientContext* context, ::Tests::Test2ListenEventStream* request, ::grpc::experimental::ClientReadReactor< ::google::protobuf::Any>* reactor) override;
      #endif
      void InvokeTestMethod2(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest* request, ::Tests::Test2TestMethod2MethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestMethod2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethod2MethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethod2(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest* request, ::Tests::Test2TestMethod2MethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethod2(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest* request, ::Tests::Test2TestMethod2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethod2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethod2MethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethod2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethod2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InvokeTestMethodSync2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest* request, ::Tests::Test2TestMethodSync2MethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestMethodSync2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodSync2MethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethodSync2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest* request, ::Tests::Test2TestMethodSync2MethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethodSync2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest* request, ::Tests::Test2TestMethodSync2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethodSync2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodSync2MethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethodSync2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodSync2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest* request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest* request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest* request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethodWithNoResponse2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest* request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest* request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest* request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestMethodNoRequest2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest* request, ::Tests::Test2PropString2SetResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPropertyPropString2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropString2SetResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest* request, ::Tests::Test2PropString2SetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest* request, ::Tests::Test2PropString2SetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPropertyPropString2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropString2SetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPropertyPropString2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropString2SetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest* request, ::Tests::Test2PropString2GetResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPropertyPropString2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropString2GetResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest* request, ::Tests::Test2PropString2GetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPropertyPropString2(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest* request, ::Tests::Test2PropString2GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPropertyPropString2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropString2GetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPropertyPropString2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropString2GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest* request, ::Tests::Test2PropComplex2SetResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPropertyPropComplex2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropComplex2SetResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest* request, ::Tests::Test2PropComplex2SetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest* request, ::Tests::Test2PropComplex2SetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPropertyPropComplex2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropComplex2SetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPropertyPropComplex2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropComplex2SetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest* request, ::Tests::Test2PropComplex2GetResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPropertyPropComplex2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropComplex2GetResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest* request, ::Tests::Test2PropComplex2GetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPropertyPropComplex2(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest* request, ::Tests::Test2PropComplex2GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPropertyPropComplex2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropComplex2GetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPropertyPropComplex2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::Test2PropComplex2GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* CreateRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* AsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::google::protobuf::Any>* ListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test2ListenEventStream& request) override;
    ::grpc::ClientAsyncReader< ::google::protobuf::Any>* AsyncListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test2ListenEventStream& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::google::protobuf::Any>* PrepareAsyncListenEventsRaw(::grpc::ClientContext* context, const ::Tests::Test2ListenEventStream& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethod2MethodResponse>* AsyncInvokeTestMethod2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethod2MethodResponse>* PrepareAsyncInvokeTestMethod2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethod2MethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodSync2MethodResponse>* AsyncInvokeTestMethodSync2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodSync2MethodResponse>* PrepareAsyncInvokeTestMethodSync2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethodSync2MethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodWithNoResponse2MethodResponse>* AsyncInvokeTestMethodWithNoResponse2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodWithNoResponse2MethodResponse>* PrepareAsyncInvokeTestMethodWithNoResponse2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodNoRequest2MethodResponse>* AsyncInvokeTestMethodNoRequest2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test2TestMethodNoRequest2MethodResponse>* PrepareAsyncInvokeTestMethodNoRequest2Raw(::grpc::ClientContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropString2SetResponse>* AsyncSetPropertyPropString2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropString2SetResponse>* PrepareAsyncSetPropertyPropString2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropString2SetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropString2GetResponse>* AsyncGetPropertyPropString2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropString2GetResponse>* PrepareAsyncGetPropertyPropString2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropString2GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropComplex2SetResponse>* AsyncSetPropertyPropComplex2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropComplex2SetResponse>* PrepareAsyncSetPropertyPropComplex2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2SetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropComplex2GetResponse>* AsyncGetPropertyPropComplex2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::Test2PropComplex2GetResponse>* PrepareAsyncGetPropertyPropComplex2Raw(::grpc::ClientContext* context, const ::Tests::Test2PropComplex2GetRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_ListenEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestMethod2_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestMethodSync2_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestMethodWithNoResponse2_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestMethodNoRequest2_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPropertyPropString2_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPropertyPropString2_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPropertyPropComplex2_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPropertyPropComplex2_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Create(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* stream);
    virtual ::grpc::Status ListenEvents(::grpc::ServerContext* context, const ::Tests::Test2ListenEventStream* request, ::grpc::ServerWriter< ::google::protobuf::Any>* writer);
    virtual ::grpc::Status InvokeTestMethod2(::grpc::ServerContext* context, const ::Tests::Test2TestMethod2MethodRequest* request, ::Tests::Test2TestMethod2MethodResponse* response);
    virtual ::grpc::Status InvokeTestMethodSync2(::grpc::ServerContext* context, const ::Tests::Test2TestMethodSync2MethodRequest* request, ::Tests::Test2TestMethodSync2MethodResponse* response);
    virtual ::grpc::Status InvokeTestMethodWithNoResponse2(::grpc::ServerContext* context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest* request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response);
    virtual ::grpc::Status InvokeTestMethodNoRequest2(::grpc::ServerContext* context, const ::Tests::Test2TestMethodNoRequest2MethodRequest* request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response);
    virtual ::grpc::Status SetPropertyPropString2(::grpc::ServerContext* context, const ::Tests::Test2PropString2SetRequest* request, ::Tests::Test2PropString2SetResponse* response);
    virtual ::grpc::Status GetPropertyPropString2(::grpc::ServerContext* context, const ::Tests::Test2PropString2GetRequest* request, ::Tests::Test2PropString2GetResponse* response);
    virtual ::grpc::Status SetPropertyPropComplex2(::grpc::ServerContext* context, const ::Tests::Test2PropComplex2SetRequest* request, ::Tests::Test2PropComplex2SetResponse* response);
    virtual ::grpc::Status GetPropertyPropComplex2(::grpc::ServerContext* context, const ::Tests::Test2PropComplex2GetRequest* request, ::Tests::Test2PropComplex2GetResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListenEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListenEvents() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListenEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenEvents(::grpc::ServerContext* /*context*/, const ::Tests::Test2ListenEventStream* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListenEvents(::grpc::ServerContext* context, ::Tests::Test2ListenEventStream* request, ::grpc::ServerAsyncWriter< ::google::protobuf::Any>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestMethod2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestMethod2() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_InvokeTestMethod2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethod2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethod2MethodRequest* /*request*/, ::Tests::Test2TestMethod2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethod2(::grpc::ServerContext* context, ::Tests::Test2TestMethod2MethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test2TestMethod2MethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestMethodSync2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestMethodSync2() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_InvokeTestMethodSync2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodSync2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethodSync2MethodRequest* /*request*/, ::Tests::Test2TestMethodSync2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethodSync2(::grpc::ServerContext* context, ::Tests::Test2TestMethodSync2MethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test2TestMethodSync2MethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestMethodWithNoResponse2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestMethodWithNoResponse2() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_InvokeTestMethodWithNoResponse2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodWithNoResponse2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest* /*request*/, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethodWithNoResponse2(::grpc::ServerContext* context, ::Tests::Test2TestMethodWithNoResponse2MethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test2TestMethodWithNoResponse2MethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestMethodNoRequest2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestMethodNoRequest2() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_InvokeTestMethodNoRequest2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoRequest2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethodNoRequest2MethodRequest* /*request*/, ::Tests::Test2TestMethodNoRequest2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethodNoRequest2(::grpc::ServerContext* context, ::Tests::Test2TestMethodNoRequest2MethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test2TestMethodNoRequest2MethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPropertyPropString2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPropertyPropString2() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SetPropertyPropString2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropString2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropString2SetRequest* /*request*/, ::Tests::Test2PropString2SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPropertyPropString2(::grpc::ServerContext* context, ::Tests::Test2PropString2SetRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test2PropString2SetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPropertyPropString2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPropertyPropString2() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetPropertyPropString2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropString2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropString2GetRequest* /*request*/, ::Tests::Test2PropString2GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPropertyPropString2(::grpc::ServerContext* context, ::Tests::Test2PropString2GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test2PropString2GetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPropertyPropComplex2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPropertyPropComplex2() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SetPropertyPropComplex2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropComplex2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropComplex2SetRequest* /*request*/, ::Tests::Test2PropComplex2SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPropertyPropComplex2(::grpc::ServerContext* context, ::Tests::Test2PropComplex2SetRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test2PropComplex2SetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPropertyPropComplex2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPropertyPropComplex2() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetPropertyPropComplex2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropComplex2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropComplex2GetRequest* /*request*/, ::Tests::Test2PropComplex2GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPropertyPropComplex2(::grpc::ServerContext* context, ::Tests::Test2PropComplex2GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::Test2PropComplex2GetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_ListenEvents<WithAsyncMethod_InvokeTestMethod2<WithAsyncMethod_InvokeTestMethodSync2<WithAsyncMethod_InvokeTestMethodWithNoResponse2<WithAsyncMethod_InvokeTestMethodNoRequest2<WithAsyncMethod_SetPropertyPropString2<WithAsyncMethod_GetPropertyPropString2<WithAsyncMethod_SetPropertyPropComplex2<WithAsyncMethod_GetPropertyPropComplex2<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Create() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackBidiHandler< ::google::protobuf::Any, ::google::protobuf::Any>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->Create(context); }));
    }
    ~ExperimentalWithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::google::protobuf::Any, ::google::protobuf::Any>* Create(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::google::protobuf::Any, ::google::protobuf::Any>* Create(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListenEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListenEvents() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::Tests::Test2ListenEventStream, ::google::protobuf::Any>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test2ListenEventStream* request) { return this->ListenEvents(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_ListenEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenEvents(::grpc::ServerContext* /*context*/, const ::Tests::Test2ListenEventStream* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::google::protobuf::Any>* ListenEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test2ListenEventStream* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::google::protobuf::Any>* ListenEvents(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test2ListenEventStream* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestMethod2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestMethod2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test2TestMethod2MethodRequest, ::Tests::Test2TestMethod2MethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test2TestMethod2MethodRequest* request, ::Tests::Test2TestMethod2MethodResponse* response) { return this->InvokeTestMethod2(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestMethod2(
        ::grpc::experimental::MessageAllocator< ::Tests::Test2TestMethod2MethodRequest, ::Tests::Test2TestMethod2MethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test2TestMethod2MethodRequest, ::Tests::Test2TestMethod2MethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestMethod2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethod2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethod2MethodRequest* /*request*/, ::Tests::Test2TestMethod2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethod2(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test2TestMethod2MethodRequest* /*request*/, ::Tests::Test2TestMethod2MethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethod2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test2TestMethod2MethodRequest* /*request*/, ::Tests::Test2TestMethod2MethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestMethodSync2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestMethodSync2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test2TestMethodSync2MethodRequest, ::Tests::Test2TestMethodSync2MethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test2TestMethodSync2MethodRequest* request, ::Tests::Test2TestMethodSync2MethodResponse* response) { return this->InvokeTestMethodSync2(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestMethodSync2(
        ::grpc::experimental::MessageAllocator< ::Tests::Test2TestMethodSync2MethodRequest, ::Tests::Test2TestMethodSync2MethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test2TestMethodSync2MethodRequest, ::Tests::Test2TestMethodSync2MethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestMethodSync2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodSync2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethodSync2MethodRequest* /*request*/, ::Tests::Test2TestMethodSync2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethodSync2(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test2TestMethodSync2MethodRequest* /*request*/, ::Tests::Test2TestMethodSync2MethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethodSync2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test2TestMethodSync2MethodRequest* /*request*/, ::Tests::Test2TestMethodSync2MethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestMethodWithNoResponse2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestMethodWithNoResponse2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test2TestMethodWithNoResponse2MethodRequest, ::Tests::Test2TestMethodWithNoResponse2MethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest* request, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* response) { return this->InvokeTestMethodWithNoResponse2(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestMethodWithNoResponse2(
        ::grpc::experimental::MessageAllocator< ::Tests::Test2TestMethodWithNoResponse2MethodRequest, ::Tests::Test2TestMethodWithNoResponse2MethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test2TestMethodWithNoResponse2MethodRequest, ::Tests::Test2TestMethodWithNoResponse2MethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestMethodWithNoResponse2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodWithNoResponse2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest* /*request*/, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethodWithNoResponse2(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest* /*request*/, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethodWithNoResponse2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest* /*request*/, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestMethodNoRequest2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestMethodNoRequest2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test2TestMethodNoRequest2MethodRequest, ::Tests::Test2TestMethodNoRequest2MethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test2TestMethodNoRequest2MethodRequest* request, ::Tests::Test2TestMethodNoRequest2MethodResponse* response) { return this->InvokeTestMethodNoRequest2(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestMethodNoRequest2(
        ::grpc::experimental::MessageAllocator< ::Tests::Test2TestMethodNoRequest2MethodRequest, ::Tests::Test2TestMethodNoRequest2MethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test2TestMethodNoRequest2MethodRequest, ::Tests::Test2TestMethodNoRequest2MethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestMethodNoRequest2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoRequest2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethodNoRequest2MethodRequest* /*request*/, ::Tests::Test2TestMethodNoRequest2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethodNoRequest2(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test2TestMethodNoRequest2MethodRequest* /*request*/, ::Tests::Test2TestMethodNoRequest2MethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethodNoRequest2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test2TestMethodNoRequest2MethodRequest* /*request*/, ::Tests::Test2TestMethodNoRequest2MethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetPropertyPropString2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetPropertyPropString2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test2PropString2SetRequest, ::Tests::Test2PropString2SetResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test2PropString2SetRequest* request, ::Tests::Test2PropString2SetResponse* response) { return this->SetPropertyPropString2(context, request, response); }));}
    void SetMessageAllocatorFor_SetPropertyPropString2(
        ::grpc::experimental::MessageAllocator< ::Tests::Test2PropString2SetRequest, ::Tests::Test2PropString2SetResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test2PropString2SetRequest, ::Tests::Test2PropString2SetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetPropertyPropString2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropString2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropString2SetRequest* /*request*/, ::Tests::Test2PropString2SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPropertyPropString2(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test2PropString2SetRequest* /*request*/, ::Tests::Test2PropString2SetResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPropertyPropString2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test2PropString2SetRequest* /*request*/, ::Tests::Test2PropString2SetResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPropertyPropString2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPropertyPropString2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test2PropString2GetRequest, ::Tests::Test2PropString2GetResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test2PropString2GetRequest* request, ::Tests::Test2PropString2GetResponse* response) { return this->GetPropertyPropString2(context, request, response); }));}
    void SetMessageAllocatorFor_GetPropertyPropString2(
        ::grpc::experimental::MessageAllocator< ::Tests::Test2PropString2GetRequest, ::Tests::Test2PropString2GetResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test2PropString2GetRequest, ::Tests::Test2PropString2GetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPropertyPropString2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropString2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropString2GetRequest* /*request*/, ::Tests::Test2PropString2GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPropertyPropString2(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test2PropString2GetRequest* /*request*/, ::Tests::Test2PropString2GetResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPropertyPropString2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test2PropString2GetRequest* /*request*/, ::Tests::Test2PropString2GetResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetPropertyPropComplex2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetPropertyPropComplex2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test2PropComplex2SetRequest, ::Tests::Test2PropComplex2SetResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test2PropComplex2SetRequest* request, ::Tests::Test2PropComplex2SetResponse* response) { return this->SetPropertyPropComplex2(context, request, response); }));}
    void SetMessageAllocatorFor_SetPropertyPropComplex2(
        ::grpc::experimental::MessageAllocator< ::Tests::Test2PropComplex2SetRequest, ::Tests::Test2PropComplex2SetResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test2PropComplex2SetRequest, ::Tests::Test2PropComplex2SetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetPropertyPropComplex2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropComplex2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropComplex2SetRequest* /*request*/, ::Tests::Test2PropComplex2SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPropertyPropComplex2(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test2PropComplex2SetRequest* /*request*/, ::Tests::Test2PropComplex2SetResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPropertyPropComplex2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test2PropComplex2SetRequest* /*request*/, ::Tests::Test2PropComplex2SetResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPropertyPropComplex2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPropertyPropComplex2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test2PropComplex2GetRequest, ::Tests::Test2PropComplex2GetResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::Test2PropComplex2GetRequest* request, ::Tests::Test2PropComplex2GetResponse* response) { return this->GetPropertyPropComplex2(context, request, response); }));}
    void SetMessageAllocatorFor_GetPropertyPropComplex2(
        ::grpc::experimental::MessageAllocator< ::Tests::Test2PropComplex2GetRequest, ::Tests::Test2PropComplex2GetResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::Test2PropComplex2GetRequest, ::Tests::Test2PropComplex2GetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPropertyPropComplex2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropComplex2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropComplex2GetRequest* /*request*/, ::Tests::Test2PropComplex2GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPropertyPropComplex2(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::Test2PropComplex2GetRequest* /*request*/, ::Tests::Test2PropComplex2GetResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPropertyPropComplex2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::Test2PropComplex2GetRequest* /*request*/, ::Tests::Test2PropComplex2GetResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_ListenEvents<ExperimentalWithCallbackMethod_InvokeTestMethod2<ExperimentalWithCallbackMethod_InvokeTestMethodSync2<ExperimentalWithCallbackMethod_InvokeTestMethodWithNoResponse2<ExperimentalWithCallbackMethod_InvokeTestMethodNoRequest2<ExperimentalWithCallbackMethod_SetPropertyPropString2<ExperimentalWithCallbackMethod_GetPropertyPropString2<ExperimentalWithCallbackMethod_SetPropertyPropComplex2<ExperimentalWithCallbackMethod_GetPropertyPropComplex2<Service > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_ListenEvents<ExperimentalWithCallbackMethod_InvokeTestMethod2<ExperimentalWithCallbackMethod_InvokeTestMethodSync2<ExperimentalWithCallbackMethod_InvokeTestMethodWithNoResponse2<ExperimentalWithCallbackMethod_InvokeTestMethodNoRequest2<ExperimentalWithCallbackMethod_SetPropertyPropString2<ExperimentalWithCallbackMethod_GetPropertyPropString2<ExperimentalWithCallbackMethod_SetPropertyPropComplex2<ExperimentalWithCallbackMethod_GetPropertyPropComplex2<Service > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListenEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListenEvents() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListenEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenEvents(::grpc::ServerContext* /*context*/, const ::Tests::Test2ListenEventStream* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestMethod2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestMethod2() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_InvokeTestMethod2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethod2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethod2MethodRequest* /*request*/, ::Tests::Test2TestMethod2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestMethodSync2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestMethodSync2() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_InvokeTestMethodSync2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodSync2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethodSync2MethodRequest* /*request*/, ::Tests::Test2TestMethodSync2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestMethodWithNoResponse2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestMethodWithNoResponse2() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_InvokeTestMethodWithNoResponse2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodWithNoResponse2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest* /*request*/, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestMethodNoRequest2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestMethodNoRequest2() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_InvokeTestMethodNoRequest2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoRequest2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethodNoRequest2MethodRequest* /*request*/, ::Tests::Test2TestMethodNoRequest2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPropertyPropString2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPropertyPropString2() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SetPropertyPropString2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropString2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropString2SetRequest* /*request*/, ::Tests::Test2PropString2SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPropertyPropString2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPropertyPropString2() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetPropertyPropString2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropString2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropString2GetRequest* /*request*/, ::Tests::Test2PropString2GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPropertyPropComplex2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPropertyPropComplex2() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SetPropertyPropComplex2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropComplex2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropComplex2SetRequest* /*request*/, ::Tests::Test2PropComplex2SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPropertyPropComplex2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPropertyPropComplex2() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetPropertyPropComplex2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropComplex2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropComplex2GetRequest* /*request*/, ::Tests::Test2PropComplex2GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListenEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListenEvents() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListenEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenEvents(::grpc::ServerContext* /*context*/, const ::Tests::Test2ListenEventStream* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListenEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestMethod2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestMethod2() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_InvokeTestMethod2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethod2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethod2MethodRequest* /*request*/, ::Tests::Test2TestMethod2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethod2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestMethodSync2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestMethodSync2() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_InvokeTestMethodSync2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodSync2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethodSync2MethodRequest* /*request*/, ::Tests::Test2TestMethodSync2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethodSync2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestMethodWithNoResponse2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestMethodWithNoResponse2() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_InvokeTestMethodWithNoResponse2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodWithNoResponse2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest* /*request*/, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethodWithNoResponse2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestMethodNoRequest2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestMethodNoRequest2() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_InvokeTestMethodNoRequest2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoRequest2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethodNoRequest2MethodRequest* /*request*/, ::Tests::Test2TestMethodNoRequest2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestMethodNoRequest2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPropertyPropString2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPropertyPropString2() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SetPropertyPropString2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropString2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropString2SetRequest* /*request*/, ::Tests::Test2PropString2SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPropertyPropString2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPropertyPropString2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPropertyPropString2() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetPropertyPropString2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropString2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropString2GetRequest* /*request*/, ::Tests::Test2PropString2GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPropertyPropString2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPropertyPropComplex2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPropertyPropComplex2() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SetPropertyPropComplex2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropComplex2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropComplex2SetRequest* /*request*/, ::Tests::Test2PropComplex2SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPropertyPropComplex2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPropertyPropComplex2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPropertyPropComplex2() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetPropertyPropComplex2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropComplex2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropComplex2GetRequest* /*request*/, ::Tests::Test2PropComplex2GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPropertyPropComplex2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Create() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->Create(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Create(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Create(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListenEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListenEvents() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->ListenEvents(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListenEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenEvents(::grpc::ServerContext* /*context*/, const ::Tests::Test2ListenEventStream* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ListenEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* ListenEvents(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestMethod2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestMethod2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestMethod2(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestMethod2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethod2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethod2MethodRequest* /*request*/, ::Tests::Test2TestMethod2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethod2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethod2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestMethodSync2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestMethodSync2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestMethodSync2(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestMethodSync2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodSync2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethodSync2MethodRequest* /*request*/, ::Tests::Test2TestMethodSync2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethodSync2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethodSync2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestMethodWithNoResponse2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestMethodWithNoResponse2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestMethodWithNoResponse2(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestMethodWithNoResponse2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodWithNoResponse2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest* /*request*/, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethodWithNoResponse2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethodWithNoResponse2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestMethodNoRequest2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestMethodNoRequest2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestMethodNoRequest2(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestMethodNoRequest2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestMethodNoRequest2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethodNoRequest2MethodRequest* /*request*/, ::Tests::Test2TestMethodNoRequest2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestMethodNoRequest2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestMethodNoRequest2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetPropertyPropString2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetPropertyPropString2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPropertyPropString2(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetPropertyPropString2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropString2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropString2SetRequest* /*request*/, ::Tests::Test2PropString2SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPropertyPropString2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPropertyPropString2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPropertyPropString2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPropertyPropString2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPropertyPropString2(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPropertyPropString2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropString2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropString2GetRequest* /*request*/, ::Tests::Test2PropString2GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPropertyPropString2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPropertyPropString2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetPropertyPropComplex2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetPropertyPropComplex2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPropertyPropComplex2(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetPropertyPropComplex2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPropertyPropComplex2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropComplex2SetRequest* /*request*/, ::Tests::Test2PropComplex2SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPropertyPropComplex2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPropertyPropComplex2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPropertyPropComplex2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPropertyPropComplex2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPropertyPropComplex2(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPropertyPropComplex2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPropertyPropComplex2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropComplex2GetRequest* /*request*/, ::Tests::Test2PropComplex2GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPropertyPropComplex2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPropertyPropComplex2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestMethod2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestMethod2() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test2TestMethod2MethodRequest, ::Tests::Test2TestMethod2MethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestMethod2<BaseClass>::StreamedInvokeTestMethod2, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestMethod2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestMethod2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethod2MethodRequest* /*request*/, ::Tests::Test2TestMethod2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestMethod2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test2TestMethod2MethodRequest,::Tests::Test2TestMethod2MethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestMethodSync2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestMethodSync2() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test2TestMethodSync2MethodRequest, ::Tests::Test2TestMethodSync2MethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestMethodSync2<BaseClass>::StreamedInvokeTestMethodSync2, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestMethodSync2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestMethodSync2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethodSync2MethodRequest* /*request*/, ::Tests::Test2TestMethodSync2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestMethodSync2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test2TestMethodSync2MethodRequest,::Tests::Test2TestMethodSync2MethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestMethodWithNoResponse2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestMethodWithNoResponse2() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test2TestMethodWithNoResponse2MethodRequest, ::Tests::Test2TestMethodWithNoResponse2MethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestMethodWithNoResponse2<BaseClass>::StreamedInvokeTestMethodWithNoResponse2, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestMethodWithNoResponse2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestMethodWithNoResponse2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethodWithNoResponse2MethodRequest* /*request*/, ::Tests::Test2TestMethodWithNoResponse2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestMethodWithNoResponse2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test2TestMethodWithNoResponse2MethodRequest,::Tests::Test2TestMethodWithNoResponse2MethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestMethodNoRequest2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestMethodNoRequest2() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test2TestMethodNoRequest2MethodRequest, ::Tests::Test2TestMethodNoRequest2MethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestMethodNoRequest2<BaseClass>::StreamedInvokeTestMethodNoRequest2, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestMethodNoRequest2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestMethodNoRequest2(::grpc::ServerContext* /*context*/, const ::Tests::Test2TestMethodNoRequest2MethodRequest* /*request*/, ::Tests::Test2TestMethodNoRequest2MethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestMethodNoRequest2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test2TestMethodNoRequest2MethodRequest,::Tests::Test2TestMethodNoRequest2MethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPropertyPropString2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPropertyPropString2() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test2PropString2SetRequest, ::Tests::Test2PropString2SetResponse>(std::bind(&WithStreamedUnaryMethod_SetPropertyPropString2<BaseClass>::StreamedSetPropertyPropString2, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetPropertyPropString2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPropertyPropString2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropString2SetRequest* /*request*/, ::Tests::Test2PropString2SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPropertyPropString2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test2PropString2SetRequest,::Tests::Test2PropString2SetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPropertyPropString2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPropertyPropString2() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test2PropString2GetRequest, ::Tests::Test2PropString2GetResponse>(std::bind(&WithStreamedUnaryMethod_GetPropertyPropString2<BaseClass>::StreamedGetPropertyPropString2, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPropertyPropString2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPropertyPropString2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropString2GetRequest* /*request*/, ::Tests::Test2PropString2GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPropertyPropString2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test2PropString2GetRequest,::Tests::Test2PropString2GetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPropertyPropComplex2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPropertyPropComplex2() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test2PropComplex2SetRequest, ::Tests::Test2PropComplex2SetResponse>(std::bind(&WithStreamedUnaryMethod_SetPropertyPropComplex2<BaseClass>::StreamedSetPropertyPropComplex2, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetPropertyPropComplex2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPropertyPropComplex2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropComplex2SetRequest* /*request*/, ::Tests::Test2PropComplex2SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPropertyPropComplex2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test2PropComplex2SetRequest,::Tests::Test2PropComplex2SetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPropertyPropComplex2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPropertyPropComplex2() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::Test2PropComplex2GetRequest, ::Tests::Test2PropComplex2GetResponse>(std::bind(&WithStreamedUnaryMethod_GetPropertyPropComplex2<BaseClass>::StreamedGetPropertyPropComplex2, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPropertyPropComplex2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPropertyPropComplex2(::grpc::ServerContext* /*context*/, const ::Tests::Test2PropComplex2GetRequest* /*request*/, ::Tests::Test2PropComplex2GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPropertyPropComplex2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::Test2PropComplex2GetRequest,::Tests::Test2PropComplex2GetResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_InvokeTestMethod2<WithStreamedUnaryMethod_InvokeTestMethodSync2<WithStreamedUnaryMethod_InvokeTestMethodWithNoResponse2<WithStreamedUnaryMethod_InvokeTestMethodNoRequest2<WithStreamedUnaryMethod_SetPropertyPropString2<WithStreamedUnaryMethod_GetPropertyPropString2<WithStreamedUnaryMethod_SetPropertyPropComplex2<WithStreamedUnaryMethod_GetPropertyPropComplex2<Service > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ListenEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ListenEvents() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::Tests::Test2ListenEventStream, ::google::protobuf::Any>(std::bind(&WithSplitStreamingMethod_ListenEvents<BaseClass>::StreamedListenEvents, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ListenEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListenEvents(::grpc::ServerContext* /*context*/, const ::Tests::Test2ListenEventStream* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListenEvents(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Tests::Test2ListenEventStream,::google::protobuf::Any>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ListenEvents<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_ListenEvents<WithStreamedUnaryMethod_InvokeTestMethod2<WithStreamedUnaryMethod_InvokeTestMethodSync2<WithStreamedUnaryMethod_InvokeTestMethodWithNoResponse2<WithStreamedUnaryMethod_InvokeTestMethodNoRequest2<WithStreamedUnaryMethod_SetPropertyPropString2<WithStreamedUnaryMethod_GetPropertyPropString2<WithStreamedUnaryMethod_SetPropertyPropComplex2<WithStreamedUnaryMethod_GetPropertyPropComplex2<Service > > > > > > > > > StreamedService;
};

class TestTypesObjectService final {
 public:
  static constexpr char const* service_full_name() {
    return "Tests.TestTypesObjectService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>> Create(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>>(CreateRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>> AsyncCreate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>>(AsyncCreateRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>> PrepareAsyncCreate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>>(PrepareAsyncCreateRaw(context, cq));
    }
    virtual ::grpc::Status InvokeTestParamDouble(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamDoubleMethodRequest& request, ::Tests::TestTypesTestParamDoubleMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamDoubleMethodResponse>> AsyncInvokeTestParamDouble(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamDoubleMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamDoubleMethodResponse>>(AsyncInvokeTestParamDoubleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamDoubleMethodResponse>> PrepareAsyncInvokeTestParamDouble(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamDoubleMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamDoubleMethodResponse>>(PrepareAsyncInvokeTestParamDoubleRaw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestParamFloat(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamFloatMethodRequest& request, ::Tests::TestTypesTestParamFloatMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamFloatMethodResponse>> AsyncInvokeTestParamFloat(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamFloatMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamFloatMethodResponse>>(AsyncInvokeTestParamFloatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamFloatMethodResponse>> PrepareAsyncInvokeTestParamFloat(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamFloatMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamFloatMethodResponse>>(PrepareAsyncInvokeTestParamFloatRaw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestParamInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamIntMethodRequest& request, ::Tests::TestTypesTestParamIntMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamIntMethodResponse>> AsyncInvokeTestParamInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamIntMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamIntMethodResponse>>(AsyncInvokeTestParamIntRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamIntMethodResponse>> PrepareAsyncInvokeTestParamInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamIntMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamIntMethodResponse>>(PrepareAsyncInvokeTestParamIntRaw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestParamUInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamUIntMethodRequest& request, ::Tests::TestTypesTestParamUIntMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamUIntMethodResponse>> AsyncInvokeTestParamUInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamUIntMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamUIntMethodResponse>>(AsyncInvokeTestParamUIntRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamUIntMethodResponse>> PrepareAsyncInvokeTestParamUInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamUIntMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamUIntMethodResponse>>(PrepareAsyncInvokeTestParamUIntRaw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestParamLong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamLongMethodRequest& request, ::Tests::TestTypesTestParamLongMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamLongMethodResponse>> AsyncInvokeTestParamLong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamLongMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamLongMethodResponse>>(AsyncInvokeTestParamLongRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamLongMethodResponse>> PrepareAsyncInvokeTestParamLong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamLongMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamLongMethodResponse>>(PrepareAsyncInvokeTestParamLongRaw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestParamULong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamULongMethodRequest& request, ::Tests::TestTypesTestParamULongMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamULongMethodResponse>> AsyncInvokeTestParamULong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamULongMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamULongMethodResponse>>(AsyncInvokeTestParamULongRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamULongMethodResponse>> PrepareAsyncInvokeTestParamULong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamULongMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamULongMethodResponse>>(PrepareAsyncInvokeTestParamULongRaw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestParamBool(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBoolMethodRequest& request, ::Tests::TestTypesTestParamBoolMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamBoolMethodResponse>> AsyncInvokeTestParamBool(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBoolMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamBoolMethodResponse>>(AsyncInvokeTestParamBoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamBoolMethodResponse>> PrepareAsyncInvokeTestParamBool(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBoolMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamBoolMethodResponse>>(PrepareAsyncInvokeTestParamBoolRaw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestParamString(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamStringMethodRequest& request, ::Tests::TestTypesTestParamStringMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamStringMethodResponse>> AsyncInvokeTestParamString(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamStringMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamStringMethodResponse>>(AsyncInvokeTestParamStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamStringMethodResponse>> PrepareAsyncInvokeTestParamString(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamStringMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamStringMethodResponse>>(PrepareAsyncInvokeTestParamStringRaw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestParamByte(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamByteMethodRequest& request, ::Tests::TestTypesTestParamByteMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamByteMethodResponse>> AsyncInvokeTestParamByte(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamByteMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamByteMethodResponse>>(AsyncInvokeTestParamByteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamByteMethodResponse>> PrepareAsyncInvokeTestParamByte(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamByteMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamByteMethodResponse>>(PrepareAsyncInvokeTestParamByteRaw(context, request, cq));
    }
    virtual ::grpc::Status InvokeTestParamBytes(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBytesMethodRequest& request, ::Tests::TestTypesTestParamBytesMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamBytesMethodResponse>> AsyncInvokeTestParamBytes(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBytesMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamBytesMethodResponse>>(AsyncInvokeTestParamBytesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamBytesMethodResponse>> PrepareAsyncInvokeTestParamBytes(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBytesMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamBytesMethodResponse>>(PrepareAsyncInvokeTestParamBytesRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Create(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::google::protobuf::Any,::google::protobuf::Any>* reactor) = 0;
      #else
      virtual void Create(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::google::protobuf::Any,::google::protobuf::Any>* reactor) = 0;
      #endif
      virtual void InvokeTestParamDouble(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamDoubleMethodRequest* request, ::Tests::TestTypesTestParamDoubleMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestParamDouble(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamDoubleMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamDouble(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamDoubleMethodRequest* request, ::Tests::TestTypesTestParamDoubleMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamDouble(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamDoubleMethodRequest* request, ::Tests::TestTypesTestParamDoubleMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamDouble(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamDoubleMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamDouble(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamDoubleMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InvokeTestParamFloat(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamFloatMethodRequest* request, ::Tests::TestTypesTestParamFloatMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestParamFloat(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamFloatMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamFloat(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamFloatMethodRequest* request, ::Tests::TestTypesTestParamFloatMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamFloat(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamFloatMethodRequest* request, ::Tests::TestTypesTestParamFloatMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamFloat(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamFloatMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamFloat(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamFloatMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InvokeTestParamInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamIntMethodRequest* request, ::Tests::TestTypesTestParamIntMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestParamInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamIntMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamIntMethodRequest* request, ::Tests::TestTypesTestParamIntMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamIntMethodRequest* request, ::Tests::TestTypesTestParamIntMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamIntMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamIntMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InvokeTestParamUInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamUIntMethodRequest* request, ::Tests::TestTypesTestParamUIntMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestParamUInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamUIntMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamUInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamUIntMethodRequest* request, ::Tests::TestTypesTestParamUIntMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamUInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamUIntMethodRequest* request, ::Tests::TestTypesTestParamUIntMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamUInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamUIntMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamUInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamUIntMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InvokeTestParamLong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamLongMethodRequest* request, ::Tests::TestTypesTestParamLongMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestParamLong(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamLongMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamLong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamLongMethodRequest* request, ::Tests::TestTypesTestParamLongMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamLong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamLongMethodRequest* request, ::Tests::TestTypesTestParamLongMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamLong(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamLongMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamLong(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamLongMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InvokeTestParamULong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamULongMethodRequest* request, ::Tests::TestTypesTestParamULongMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestParamULong(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamULongMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamULong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamULongMethodRequest* request, ::Tests::TestTypesTestParamULongMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamULong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamULongMethodRequest* request, ::Tests::TestTypesTestParamULongMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamULong(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamULongMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamULong(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamULongMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InvokeTestParamBool(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBoolMethodRequest* request, ::Tests::TestTypesTestParamBoolMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestParamBool(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamBoolMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamBool(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBoolMethodRequest* request, ::Tests::TestTypesTestParamBoolMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamBool(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBoolMethodRequest* request, ::Tests::TestTypesTestParamBoolMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamBool(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamBoolMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamBool(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamBoolMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InvokeTestParamString(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamStringMethodRequest* request, ::Tests::TestTypesTestParamStringMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestParamString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamStringMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamString(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamStringMethodRequest* request, ::Tests::TestTypesTestParamStringMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamString(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamStringMethodRequest* request, ::Tests::TestTypesTestParamStringMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamStringMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamStringMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InvokeTestParamByte(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamByteMethodRequest* request, ::Tests::TestTypesTestParamByteMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestParamByte(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamByteMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamByte(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamByteMethodRequest* request, ::Tests::TestTypesTestParamByteMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamByte(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamByteMethodRequest* request, ::Tests::TestTypesTestParamByteMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamByte(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamByteMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamByte(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamByteMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InvokeTestParamBytes(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBytesMethodRequest* request, ::Tests::TestTypesTestParamBytesMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InvokeTestParamBytes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamBytesMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamBytes(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBytesMethodRequest* request, ::Tests::TestTypesTestParamBytesMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamBytes(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBytesMethodRequest* request, ::Tests::TestTypesTestParamBytesMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InvokeTestParamBytes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamBytesMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InvokeTestParamBytes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamBytesMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>* CreateRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>* AsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Any, ::google::protobuf::Any>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamDoubleMethodResponse>* AsyncInvokeTestParamDoubleRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamDoubleMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamDoubleMethodResponse>* PrepareAsyncInvokeTestParamDoubleRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamDoubleMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamFloatMethodResponse>* AsyncInvokeTestParamFloatRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamFloatMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamFloatMethodResponse>* PrepareAsyncInvokeTestParamFloatRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamFloatMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamIntMethodResponse>* AsyncInvokeTestParamIntRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamIntMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamIntMethodResponse>* PrepareAsyncInvokeTestParamIntRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamIntMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamUIntMethodResponse>* AsyncInvokeTestParamUIntRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamUIntMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamUIntMethodResponse>* PrepareAsyncInvokeTestParamUIntRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamUIntMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamLongMethodResponse>* AsyncInvokeTestParamLongRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamLongMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamLongMethodResponse>* PrepareAsyncInvokeTestParamLongRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamLongMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamULongMethodResponse>* AsyncInvokeTestParamULongRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamULongMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamULongMethodResponse>* PrepareAsyncInvokeTestParamULongRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamULongMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamBoolMethodResponse>* AsyncInvokeTestParamBoolRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBoolMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamBoolMethodResponse>* PrepareAsyncInvokeTestParamBoolRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBoolMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamStringMethodResponse>* AsyncInvokeTestParamStringRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamStringMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamStringMethodResponse>* PrepareAsyncInvokeTestParamStringRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamStringMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamByteMethodResponse>* AsyncInvokeTestParamByteRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamByteMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamByteMethodResponse>* PrepareAsyncInvokeTestParamByteRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamByteMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamBytesMethodResponse>* AsyncInvokeTestParamBytesRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBytesMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Tests::TestTypesTestParamBytesMethodResponse>* PrepareAsyncInvokeTestParamBytesRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBytesMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>> Create(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>>(CreateRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>> AsyncCreate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>>(AsyncCreateRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>> PrepareAsyncCreate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>>(PrepareAsyncCreateRaw(context, cq));
    }
    ::grpc::Status InvokeTestParamDouble(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamDoubleMethodRequest& request, ::Tests::TestTypesTestParamDoubleMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamDoubleMethodResponse>> AsyncInvokeTestParamDouble(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamDoubleMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamDoubleMethodResponse>>(AsyncInvokeTestParamDoubleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamDoubleMethodResponse>> PrepareAsyncInvokeTestParamDouble(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamDoubleMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamDoubleMethodResponse>>(PrepareAsyncInvokeTestParamDoubleRaw(context, request, cq));
    }
    ::grpc::Status InvokeTestParamFloat(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamFloatMethodRequest& request, ::Tests::TestTypesTestParamFloatMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamFloatMethodResponse>> AsyncInvokeTestParamFloat(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamFloatMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamFloatMethodResponse>>(AsyncInvokeTestParamFloatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamFloatMethodResponse>> PrepareAsyncInvokeTestParamFloat(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamFloatMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamFloatMethodResponse>>(PrepareAsyncInvokeTestParamFloatRaw(context, request, cq));
    }
    ::grpc::Status InvokeTestParamInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamIntMethodRequest& request, ::Tests::TestTypesTestParamIntMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamIntMethodResponse>> AsyncInvokeTestParamInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamIntMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamIntMethodResponse>>(AsyncInvokeTestParamIntRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamIntMethodResponse>> PrepareAsyncInvokeTestParamInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamIntMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamIntMethodResponse>>(PrepareAsyncInvokeTestParamIntRaw(context, request, cq));
    }
    ::grpc::Status InvokeTestParamUInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamUIntMethodRequest& request, ::Tests::TestTypesTestParamUIntMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamUIntMethodResponse>> AsyncInvokeTestParamUInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamUIntMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamUIntMethodResponse>>(AsyncInvokeTestParamUIntRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamUIntMethodResponse>> PrepareAsyncInvokeTestParamUInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamUIntMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamUIntMethodResponse>>(PrepareAsyncInvokeTestParamUIntRaw(context, request, cq));
    }
    ::grpc::Status InvokeTestParamLong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamLongMethodRequest& request, ::Tests::TestTypesTestParamLongMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamLongMethodResponse>> AsyncInvokeTestParamLong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamLongMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamLongMethodResponse>>(AsyncInvokeTestParamLongRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamLongMethodResponse>> PrepareAsyncInvokeTestParamLong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamLongMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamLongMethodResponse>>(PrepareAsyncInvokeTestParamLongRaw(context, request, cq));
    }
    ::grpc::Status InvokeTestParamULong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamULongMethodRequest& request, ::Tests::TestTypesTestParamULongMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamULongMethodResponse>> AsyncInvokeTestParamULong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamULongMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamULongMethodResponse>>(AsyncInvokeTestParamULongRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamULongMethodResponse>> PrepareAsyncInvokeTestParamULong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamULongMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamULongMethodResponse>>(PrepareAsyncInvokeTestParamULongRaw(context, request, cq));
    }
    ::grpc::Status InvokeTestParamBool(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBoolMethodRequest& request, ::Tests::TestTypesTestParamBoolMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamBoolMethodResponse>> AsyncInvokeTestParamBool(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBoolMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamBoolMethodResponse>>(AsyncInvokeTestParamBoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamBoolMethodResponse>> PrepareAsyncInvokeTestParamBool(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBoolMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamBoolMethodResponse>>(PrepareAsyncInvokeTestParamBoolRaw(context, request, cq));
    }
    ::grpc::Status InvokeTestParamString(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamStringMethodRequest& request, ::Tests::TestTypesTestParamStringMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamStringMethodResponse>> AsyncInvokeTestParamString(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamStringMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamStringMethodResponse>>(AsyncInvokeTestParamStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamStringMethodResponse>> PrepareAsyncInvokeTestParamString(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamStringMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamStringMethodResponse>>(PrepareAsyncInvokeTestParamStringRaw(context, request, cq));
    }
    ::grpc::Status InvokeTestParamByte(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamByteMethodRequest& request, ::Tests::TestTypesTestParamByteMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamByteMethodResponse>> AsyncInvokeTestParamByte(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamByteMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamByteMethodResponse>>(AsyncInvokeTestParamByteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamByteMethodResponse>> PrepareAsyncInvokeTestParamByte(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamByteMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamByteMethodResponse>>(PrepareAsyncInvokeTestParamByteRaw(context, request, cq));
    }
    ::grpc::Status InvokeTestParamBytes(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBytesMethodRequest& request, ::Tests::TestTypesTestParamBytesMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamBytesMethodResponse>> AsyncInvokeTestParamBytes(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBytesMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamBytesMethodResponse>>(AsyncInvokeTestParamBytesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamBytesMethodResponse>> PrepareAsyncInvokeTestParamBytes(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBytesMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamBytesMethodResponse>>(PrepareAsyncInvokeTestParamBytesRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Create(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::google::protobuf::Any,::google::protobuf::Any>* reactor) override;
      #else
      void Create(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::google::protobuf::Any,::google::protobuf::Any>* reactor) override;
      #endif
      void InvokeTestParamDouble(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamDoubleMethodRequest* request, ::Tests::TestTypesTestParamDoubleMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestParamDouble(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamDoubleMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamDouble(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamDoubleMethodRequest* request, ::Tests::TestTypesTestParamDoubleMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamDouble(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamDoubleMethodRequest* request, ::Tests::TestTypesTestParamDoubleMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamDouble(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamDoubleMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamDouble(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamDoubleMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InvokeTestParamFloat(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamFloatMethodRequest* request, ::Tests::TestTypesTestParamFloatMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestParamFloat(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamFloatMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamFloat(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamFloatMethodRequest* request, ::Tests::TestTypesTestParamFloatMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamFloat(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamFloatMethodRequest* request, ::Tests::TestTypesTestParamFloatMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamFloat(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamFloatMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamFloat(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamFloatMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InvokeTestParamInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamIntMethodRequest* request, ::Tests::TestTypesTestParamIntMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestParamInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamIntMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamIntMethodRequest* request, ::Tests::TestTypesTestParamIntMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamIntMethodRequest* request, ::Tests::TestTypesTestParamIntMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamIntMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamIntMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InvokeTestParamUInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamUIntMethodRequest* request, ::Tests::TestTypesTestParamUIntMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestParamUInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamUIntMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamUInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamUIntMethodRequest* request, ::Tests::TestTypesTestParamUIntMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamUInt(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamUIntMethodRequest* request, ::Tests::TestTypesTestParamUIntMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamUInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamUIntMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamUInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamUIntMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InvokeTestParamLong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamLongMethodRequest* request, ::Tests::TestTypesTestParamLongMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestParamLong(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamLongMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamLong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamLongMethodRequest* request, ::Tests::TestTypesTestParamLongMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamLong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamLongMethodRequest* request, ::Tests::TestTypesTestParamLongMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamLong(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamLongMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamLong(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamLongMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InvokeTestParamULong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamULongMethodRequest* request, ::Tests::TestTypesTestParamULongMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestParamULong(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamULongMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamULong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamULongMethodRequest* request, ::Tests::TestTypesTestParamULongMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamULong(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamULongMethodRequest* request, ::Tests::TestTypesTestParamULongMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamULong(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamULongMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamULong(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamULongMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InvokeTestParamBool(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBoolMethodRequest* request, ::Tests::TestTypesTestParamBoolMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestParamBool(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamBoolMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamBool(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBoolMethodRequest* request, ::Tests::TestTypesTestParamBoolMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamBool(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBoolMethodRequest* request, ::Tests::TestTypesTestParamBoolMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamBool(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamBoolMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamBool(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamBoolMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InvokeTestParamString(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamStringMethodRequest* request, ::Tests::TestTypesTestParamStringMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestParamString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamStringMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamString(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamStringMethodRequest* request, ::Tests::TestTypesTestParamStringMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamString(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamStringMethodRequest* request, ::Tests::TestTypesTestParamStringMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamStringMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamString(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamStringMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InvokeTestParamByte(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamByteMethodRequest* request, ::Tests::TestTypesTestParamByteMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestParamByte(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamByteMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamByte(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamByteMethodRequest* request, ::Tests::TestTypesTestParamByteMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamByte(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamByteMethodRequest* request, ::Tests::TestTypesTestParamByteMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamByte(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamByteMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamByte(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamByteMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InvokeTestParamBytes(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBytesMethodRequest* request, ::Tests::TestTypesTestParamBytesMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void InvokeTestParamBytes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamBytesMethodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamBytes(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBytesMethodRequest* request, ::Tests::TestTypesTestParamBytesMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamBytes(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBytesMethodRequest* request, ::Tests::TestTypesTestParamBytesMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InvokeTestParamBytes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamBytesMethodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InvokeTestParamBytes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Tests::TestTypesTestParamBytesMethodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* CreateRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* AsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamDoubleMethodResponse>* AsyncInvokeTestParamDoubleRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamDoubleMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamDoubleMethodResponse>* PrepareAsyncInvokeTestParamDoubleRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamDoubleMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamFloatMethodResponse>* AsyncInvokeTestParamFloatRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamFloatMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamFloatMethodResponse>* PrepareAsyncInvokeTestParamFloatRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamFloatMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamIntMethodResponse>* AsyncInvokeTestParamIntRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamIntMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamIntMethodResponse>* PrepareAsyncInvokeTestParamIntRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamIntMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamUIntMethodResponse>* AsyncInvokeTestParamUIntRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamUIntMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamUIntMethodResponse>* PrepareAsyncInvokeTestParamUIntRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamUIntMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamLongMethodResponse>* AsyncInvokeTestParamLongRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamLongMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamLongMethodResponse>* PrepareAsyncInvokeTestParamLongRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamLongMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamULongMethodResponse>* AsyncInvokeTestParamULongRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamULongMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamULongMethodResponse>* PrepareAsyncInvokeTestParamULongRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamULongMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamBoolMethodResponse>* AsyncInvokeTestParamBoolRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBoolMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamBoolMethodResponse>* PrepareAsyncInvokeTestParamBoolRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBoolMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamStringMethodResponse>* AsyncInvokeTestParamStringRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamStringMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamStringMethodResponse>* PrepareAsyncInvokeTestParamStringRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamStringMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamByteMethodResponse>* AsyncInvokeTestParamByteRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamByteMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamByteMethodResponse>* PrepareAsyncInvokeTestParamByteRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamByteMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamBytesMethodResponse>* AsyncInvokeTestParamBytesRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBytesMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Tests::TestTypesTestParamBytesMethodResponse>* PrepareAsyncInvokeTestParamBytesRaw(::grpc::ClientContext* context, const ::Tests::TestTypesTestParamBytesMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestParamDouble_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestParamFloat_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestParamInt_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestParamUInt_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestParamLong_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestParamULong_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestParamBool_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestParamString_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestParamByte_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeTestParamBytes_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Create(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* stream);
    virtual ::grpc::Status InvokeTestParamDouble(::grpc::ServerContext* context, const ::Tests::TestTypesTestParamDoubleMethodRequest* request, ::Tests::TestTypesTestParamDoubleMethodResponse* response);
    virtual ::grpc::Status InvokeTestParamFloat(::grpc::ServerContext* context, const ::Tests::TestTypesTestParamFloatMethodRequest* request, ::Tests::TestTypesTestParamFloatMethodResponse* response);
    virtual ::grpc::Status InvokeTestParamInt(::grpc::ServerContext* context, const ::Tests::TestTypesTestParamIntMethodRequest* request, ::Tests::TestTypesTestParamIntMethodResponse* response);
    virtual ::grpc::Status InvokeTestParamUInt(::grpc::ServerContext* context, const ::Tests::TestTypesTestParamUIntMethodRequest* request, ::Tests::TestTypesTestParamUIntMethodResponse* response);
    virtual ::grpc::Status InvokeTestParamLong(::grpc::ServerContext* context, const ::Tests::TestTypesTestParamLongMethodRequest* request, ::Tests::TestTypesTestParamLongMethodResponse* response);
    virtual ::grpc::Status InvokeTestParamULong(::grpc::ServerContext* context, const ::Tests::TestTypesTestParamULongMethodRequest* request, ::Tests::TestTypesTestParamULongMethodResponse* response);
    virtual ::grpc::Status InvokeTestParamBool(::grpc::ServerContext* context, const ::Tests::TestTypesTestParamBoolMethodRequest* request, ::Tests::TestTypesTestParamBoolMethodResponse* response);
    virtual ::grpc::Status InvokeTestParamString(::grpc::ServerContext* context, const ::Tests::TestTypesTestParamStringMethodRequest* request, ::Tests::TestTypesTestParamStringMethodResponse* response);
    virtual ::grpc::Status InvokeTestParamByte(::grpc::ServerContext* context, const ::Tests::TestTypesTestParamByteMethodRequest* request, ::Tests::TestTypesTestParamByteMethodResponse* response);
    virtual ::grpc::Status InvokeTestParamBytes(::grpc::ServerContext* context, const ::Tests::TestTypesTestParamBytesMethodRequest* request, ::Tests::TestTypesTestParamBytesMethodResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestParamDouble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestParamDouble() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_InvokeTestParamDouble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamDouble(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamDoubleMethodRequest* /*request*/, ::Tests::TestTypesTestParamDoubleMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamDouble(::grpc::ServerContext* context, ::Tests::TestTypesTestParamDoubleMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::TestTypesTestParamDoubleMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestParamFloat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestParamFloat() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_InvokeTestParamFloat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamFloat(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamFloatMethodRequest* /*request*/, ::Tests::TestTypesTestParamFloatMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamFloat(::grpc::ServerContext* context, ::Tests::TestTypesTestParamFloatMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::TestTypesTestParamFloatMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestParamInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestParamInt() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_InvokeTestParamInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamInt(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamIntMethodRequest* /*request*/, ::Tests::TestTypesTestParamIntMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamInt(::grpc::ServerContext* context, ::Tests::TestTypesTestParamIntMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::TestTypesTestParamIntMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestParamUInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestParamUInt() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_InvokeTestParamUInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamUInt(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamUIntMethodRequest* /*request*/, ::Tests::TestTypesTestParamUIntMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamUInt(::grpc::ServerContext* context, ::Tests::TestTypesTestParamUIntMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::TestTypesTestParamUIntMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestParamLong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestParamLong() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_InvokeTestParamLong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamLong(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamLongMethodRequest* /*request*/, ::Tests::TestTypesTestParamLongMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamLong(::grpc::ServerContext* context, ::Tests::TestTypesTestParamLongMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::TestTypesTestParamLongMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestParamULong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestParamULong() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_InvokeTestParamULong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamULong(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamULongMethodRequest* /*request*/, ::Tests::TestTypesTestParamULongMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamULong(::grpc::ServerContext* context, ::Tests::TestTypesTestParamULongMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::TestTypesTestParamULongMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestParamBool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestParamBool() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_InvokeTestParamBool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamBool(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamBoolMethodRequest* /*request*/, ::Tests::TestTypesTestParamBoolMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamBool(::grpc::ServerContext* context, ::Tests::TestTypesTestParamBoolMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::TestTypesTestParamBoolMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestParamString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestParamString() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_InvokeTestParamString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamString(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamStringMethodRequest* /*request*/, ::Tests::TestTypesTestParamStringMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamString(::grpc::ServerContext* context, ::Tests::TestTypesTestParamStringMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::TestTypesTestParamStringMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestParamByte : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestParamByte() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_InvokeTestParamByte() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamByte(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamByteMethodRequest* /*request*/, ::Tests::TestTypesTestParamByteMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamByte(::grpc::ServerContext* context, ::Tests::TestTypesTestParamByteMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::TestTypesTestParamByteMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeTestParamBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeTestParamBytes() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_InvokeTestParamBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamBytes(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamBytesMethodRequest* /*request*/, ::Tests::TestTypesTestParamBytesMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamBytes(::grpc::ServerContext* context, ::Tests::TestTypesTestParamBytesMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::Tests::TestTypesTestParamBytesMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_InvokeTestParamDouble<WithAsyncMethod_InvokeTestParamFloat<WithAsyncMethod_InvokeTestParamInt<WithAsyncMethod_InvokeTestParamUInt<WithAsyncMethod_InvokeTestParamLong<WithAsyncMethod_InvokeTestParamULong<WithAsyncMethod_InvokeTestParamBool<WithAsyncMethod_InvokeTestParamString<WithAsyncMethod_InvokeTestParamByte<WithAsyncMethod_InvokeTestParamBytes<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Create() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackBidiHandler< ::google::protobuf::Any, ::google::protobuf::Any>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->Create(context); }));
    }
    ~ExperimentalWithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::google::protobuf::Any, ::google::protobuf::Any>* Create(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::google::protobuf::Any, ::google::protobuf::Any>* Create(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestParamDouble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestParamDouble() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamDoubleMethodRequest, ::Tests::TestTypesTestParamDoubleMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::TestTypesTestParamDoubleMethodRequest* request, ::Tests::TestTypesTestParamDoubleMethodResponse* response) { return this->InvokeTestParamDouble(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestParamDouble(
        ::grpc::experimental::MessageAllocator< ::Tests::TestTypesTestParamDoubleMethodRequest, ::Tests::TestTypesTestParamDoubleMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamDoubleMethodRequest, ::Tests::TestTypesTestParamDoubleMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestParamDouble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamDouble(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamDoubleMethodRequest* /*request*/, ::Tests::TestTypesTestParamDoubleMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamDouble(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamDoubleMethodRequest* /*request*/, ::Tests::TestTypesTestParamDoubleMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamDouble(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamDoubleMethodRequest* /*request*/, ::Tests::TestTypesTestParamDoubleMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestParamFloat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestParamFloat() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamFloatMethodRequest, ::Tests::TestTypesTestParamFloatMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::TestTypesTestParamFloatMethodRequest* request, ::Tests::TestTypesTestParamFloatMethodResponse* response) { return this->InvokeTestParamFloat(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestParamFloat(
        ::grpc::experimental::MessageAllocator< ::Tests::TestTypesTestParamFloatMethodRequest, ::Tests::TestTypesTestParamFloatMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamFloatMethodRequest, ::Tests::TestTypesTestParamFloatMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestParamFloat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamFloat(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamFloatMethodRequest* /*request*/, ::Tests::TestTypesTestParamFloatMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamFloat(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamFloatMethodRequest* /*request*/, ::Tests::TestTypesTestParamFloatMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamFloat(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamFloatMethodRequest* /*request*/, ::Tests::TestTypesTestParamFloatMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestParamInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestParamInt() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamIntMethodRequest, ::Tests::TestTypesTestParamIntMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::TestTypesTestParamIntMethodRequest* request, ::Tests::TestTypesTestParamIntMethodResponse* response) { return this->InvokeTestParamInt(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestParamInt(
        ::grpc::experimental::MessageAllocator< ::Tests::TestTypesTestParamIntMethodRequest, ::Tests::TestTypesTestParamIntMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamIntMethodRequest, ::Tests::TestTypesTestParamIntMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestParamInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamInt(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamIntMethodRequest* /*request*/, ::Tests::TestTypesTestParamIntMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamInt(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamIntMethodRequest* /*request*/, ::Tests::TestTypesTestParamIntMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamInt(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamIntMethodRequest* /*request*/, ::Tests::TestTypesTestParamIntMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestParamUInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestParamUInt() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamUIntMethodRequest, ::Tests::TestTypesTestParamUIntMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::TestTypesTestParamUIntMethodRequest* request, ::Tests::TestTypesTestParamUIntMethodResponse* response) { return this->InvokeTestParamUInt(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestParamUInt(
        ::grpc::experimental::MessageAllocator< ::Tests::TestTypesTestParamUIntMethodRequest, ::Tests::TestTypesTestParamUIntMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamUIntMethodRequest, ::Tests::TestTypesTestParamUIntMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestParamUInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamUInt(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamUIntMethodRequest* /*request*/, ::Tests::TestTypesTestParamUIntMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamUInt(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamUIntMethodRequest* /*request*/, ::Tests::TestTypesTestParamUIntMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamUInt(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamUIntMethodRequest* /*request*/, ::Tests::TestTypesTestParamUIntMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestParamLong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestParamLong() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamLongMethodRequest, ::Tests::TestTypesTestParamLongMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::TestTypesTestParamLongMethodRequest* request, ::Tests::TestTypesTestParamLongMethodResponse* response) { return this->InvokeTestParamLong(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestParamLong(
        ::grpc::experimental::MessageAllocator< ::Tests::TestTypesTestParamLongMethodRequest, ::Tests::TestTypesTestParamLongMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamLongMethodRequest, ::Tests::TestTypesTestParamLongMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestParamLong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamLong(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamLongMethodRequest* /*request*/, ::Tests::TestTypesTestParamLongMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamLong(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamLongMethodRequest* /*request*/, ::Tests::TestTypesTestParamLongMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamLong(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamLongMethodRequest* /*request*/, ::Tests::TestTypesTestParamLongMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestParamULong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestParamULong() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamULongMethodRequest, ::Tests::TestTypesTestParamULongMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::TestTypesTestParamULongMethodRequest* request, ::Tests::TestTypesTestParamULongMethodResponse* response) { return this->InvokeTestParamULong(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestParamULong(
        ::grpc::experimental::MessageAllocator< ::Tests::TestTypesTestParamULongMethodRequest, ::Tests::TestTypesTestParamULongMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamULongMethodRequest, ::Tests::TestTypesTestParamULongMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestParamULong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamULong(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamULongMethodRequest* /*request*/, ::Tests::TestTypesTestParamULongMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamULong(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamULongMethodRequest* /*request*/, ::Tests::TestTypesTestParamULongMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamULong(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamULongMethodRequest* /*request*/, ::Tests::TestTypesTestParamULongMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestParamBool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestParamBool() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamBoolMethodRequest, ::Tests::TestTypesTestParamBoolMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::TestTypesTestParamBoolMethodRequest* request, ::Tests::TestTypesTestParamBoolMethodResponse* response) { return this->InvokeTestParamBool(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestParamBool(
        ::grpc::experimental::MessageAllocator< ::Tests::TestTypesTestParamBoolMethodRequest, ::Tests::TestTypesTestParamBoolMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamBoolMethodRequest, ::Tests::TestTypesTestParamBoolMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestParamBool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamBool(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamBoolMethodRequest* /*request*/, ::Tests::TestTypesTestParamBoolMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamBool(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamBoolMethodRequest* /*request*/, ::Tests::TestTypesTestParamBoolMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamBool(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamBoolMethodRequest* /*request*/, ::Tests::TestTypesTestParamBoolMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestParamString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestParamString() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamStringMethodRequest, ::Tests::TestTypesTestParamStringMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::TestTypesTestParamStringMethodRequest* request, ::Tests::TestTypesTestParamStringMethodResponse* response) { return this->InvokeTestParamString(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestParamString(
        ::grpc::experimental::MessageAllocator< ::Tests::TestTypesTestParamStringMethodRequest, ::Tests::TestTypesTestParamStringMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamStringMethodRequest, ::Tests::TestTypesTestParamStringMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestParamString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamString(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamStringMethodRequest* /*request*/, ::Tests::TestTypesTestParamStringMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamString(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamStringMethodRequest* /*request*/, ::Tests::TestTypesTestParamStringMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamString(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamStringMethodRequest* /*request*/, ::Tests::TestTypesTestParamStringMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestParamByte : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestParamByte() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamByteMethodRequest, ::Tests::TestTypesTestParamByteMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::TestTypesTestParamByteMethodRequest* request, ::Tests::TestTypesTestParamByteMethodResponse* response) { return this->InvokeTestParamByte(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestParamByte(
        ::grpc::experimental::MessageAllocator< ::Tests::TestTypesTestParamByteMethodRequest, ::Tests::TestTypesTestParamByteMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamByteMethodRequest, ::Tests::TestTypesTestParamByteMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestParamByte() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamByte(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamByteMethodRequest* /*request*/, ::Tests::TestTypesTestParamByteMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamByte(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamByteMethodRequest* /*request*/, ::Tests::TestTypesTestParamByteMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamByte(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamByteMethodRequest* /*request*/, ::Tests::TestTypesTestParamByteMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InvokeTestParamBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InvokeTestParamBytes() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamBytesMethodRequest, ::Tests::TestTypesTestParamBytesMethodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Tests::TestTypesTestParamBytesMethodRequest* request, ::Tests::TestTypesTestParamBytesMethodResponse* response) { return this->InvokeTestParamBytes(context, request, response); }));}
    void SetMessageAllocatorFor_InvokeTestParamBytes(
        ::grpc::experimental::MessageAllocator< ::Tests::TestTypesTestParamBytesMethodRequest, ::Tests::TestTypesTestParamBytesMethodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Tests::TestTypesTestParamBytesMethodRequest, ::Tests::TestTypesTestParamBytesMethodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InvokeTestParamBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamBytes(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamBytesMethodRequest* /*request*/, ::Tests::TestTypesTestParamBytesMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamBytes(
      ::grpc::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamBytesMethodRequest* /*request*/, ::Tests::TestTypesTestParamBytesMethodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamBytes(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Tests::TestTypesTestParamBytesMethodRequest* /*request*/, ::Tests::TestTypesTestParamBytesMethodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_InvokeTestParamDouble<ExperimentalWithCallbackMethod_InvokeTestParamFloat<ExperimentalWithCallbackMethod_InvokeTestParamInt<ExperimentalWithCallbackMethod_InvokeTestParamUInt<ExperimentalWithCallbackMethod_InvokeTestParamLong<ExperimentalWithCallbackMethod_InvokeTestParamULong<ExperimentalWithCallbackMethod_InvokeTestParamBool<ExperimentalWithCallbackMethod_InvokeTestParamString<ExperimentalWithCallbackMethod_InvokeTestParamByte<ExperimentalWithCallbackMethod_InvokeTestParamBytes<Service > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_InvokeTestParamDouble<ExperimentalWithCallbackMethod_InvokeTestParamFloat<ExperimentalWithCallbackMethod_InvokeTestParamInt<ExperimentalWithCallbackMethod_InvokeTestParamUInt<ExperimentalWithCallbackMethod_InvokeTestParamLong<ExperimentalWithCallbackMethod_InvokeTestParamULong<ExperimentalWithCallbackMethod_InvokeTestParamBool<ExperimentalWithCallbackMethod_InvokeTestParamString<ExperimentalWithCallbackMethod_InvokeTestParamByte<ExperimentalWithCallbackMethod_InvokeTestParamBytes<Service > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestParamDouble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestParamDouble() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_InvokeTestParamDouble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamDouble(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamDoubleMethodRequest* /*request*/, ::Tests::TestTypesTestParamDoubleMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestParamFloat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestParamFloat() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_InvokeTestParamFloat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamFloat(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamFloatMethodRequest* /*request*/, ::Tests::TestTypesTestParamFloatMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestParamInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestParamInt() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_InvokeTestParamInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamInt(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamIntMethodRequest* /*request*/, ::Tests::TestTypesTestParamIntMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestParamUInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestParamUInt() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_InvokeTestParamUInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamUInt(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamUIntMethodRequest* /*request*/, ::Tests::TestTypesTestParamUIntMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestParamLong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestParamLong() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_InvokeTestParamLong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamLong(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamLongMethodRequest* /*request*/, ::Tests::TestTypesTestParamLongMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestParamULong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestParamULong() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_InvokeTestParamULong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamULong(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamULongMethodRequest* /*request*/, ::Tests::TestTypesTestParamULongMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestParamBool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestParamBool() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_InvokeTestParamBool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamBool(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamBoolMethodRequest* /*request*/, ::Tests::TestTypesTestParamBoolMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestParamString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestParamString() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_InvokeTestParamString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamString(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamStringMethodRequest* /*request*/, ::Tests::TestTypesTestParamStringMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestParamByte : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestParamByte() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_InvokeTestParamByte() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamByte(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamByteMethodRequest* /*request*/, ::Tests::TestTypesTestParamByteMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeTestParamBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeTestParamBytes() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_InvokeTestParamBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamBytes(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamBytesMethodRequest* /*request*/, ::Tests::TestTypesTestParamBytesMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestParamDouble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestParamDouble() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_InvokeTestParamDouble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamDouble(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamDoubleMethodRequest* /*request*/, ::Tests::TestTypesTestParamDoubleMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamDouble(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestParamFloat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestParamFloat() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_InvokeTestParamFloat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamFloat(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamFloatMethodRequest* /*request*/, ::Tests::TestTypesTestParamFloatMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamFloat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestParamInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestParamInt() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_InvokeTestParamInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamInt(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamIntMethodRequest* /*request*/, ::Tests::TestTypesTestParamIntMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamInt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestParamUInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestParamUInt() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_InvokeTestParamUInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamUInt(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamUIntMethodRequest* /*request*/, ::Tests::TestTypesTestParamUIntMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamUInt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestParamLong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestParamLong() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_InvokeTestParamLong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamLong(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamLongMethodRequest* /*request*/, ::Tests::TestTypesTestParamLongMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamLong(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestParamULong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestParamULong() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_InvokeTestParamULong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamULong(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamULongMethodRequest* /*request*/, ::Tests::TestTypesTestParamULongMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamULong(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestParamBool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestParamBool() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_InvokeTestParamBool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamBool(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamBoolMethodRequest* /*request*/, ::Tests::TestTypesTestParamBoolMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamBool(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestParamString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestParamString() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_InvokeTestParamString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamString(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamStringMethodRequest* /*request*/, ::Tests::TestTypesTestParamStringMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamString(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestParamByte : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestParamByte() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_InvokeTestParamByte() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamByte(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamByteMethodRequest* /*request*/, ::Tests::TestTypesTestParamByteMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamByte(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeTestParamBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeTestParamBytes() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_InvokeTestParamBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamBytes(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamBytesMethodRequest* /*request*/, ::Tests::TestTypesTestParamBytesMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeTestParamBytes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Create() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->Create(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Create(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Create(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestParamDouble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestParamDouble() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestParamDouble(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestParamDouble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamDouble(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamDoubleMethodRequest* /*request*/, ::Tests::TestTypesTestParamDoubleMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamDouble(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamDouble(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestParamFloat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestParamFloat() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestParamFloat(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestParamFloat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamFloat(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamFloatMethodRequest* /*request*/, ::Tests::TestTypesTestParamFloatMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamFloat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamFloat(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestParamInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestParamInt() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestParamInt(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestParamInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamInt(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamIntMethodRequest* /*request*/, ::Tests::TestTypesTestParamIntMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamInt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamInt(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestParamUInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestParamUInt() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestParamUInt(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestParamUInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamUInt(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamUIntMethodRequest* /*request*/, ::Tests::TestTypesTestParamUIntMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamUInt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamUInt(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestParamLong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestParamLong() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestParamLong(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestParamLong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamLong(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamLongMethodRequest* /*request*/, ::Tests::TestTypesTestParamLongMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamLong(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamLong(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestParamULong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestParamULong() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestParamULong(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestParamULong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamULong(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamULongMethodRequest* /*request*/, ::Tests::TestTypesTestParamULongMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamULong(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamULong(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestParamBool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestParamBool() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestParamBool(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestParamBool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamBool(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamBoolMethodRequest* /*request*/, ::Tests::TestTypesTestParamBoolMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamBool(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamBool(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestParamString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestParamString() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestParamString(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestParamString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamString(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamStringMethodRequest* /*request*/, ::Tests::TestTypesTestParamStringMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamString(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamString(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestParamByte : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestParamByte() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestParamByte(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestParamByte() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamByte(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamByteMethodRequest* /*request*/, ::Tests::TestTypesTestParamByteMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamByte(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamByte(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InvokeTestParamBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InvokeTestParamBytes() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InvokeTestParamBytes(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InvokeTestParamBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeTestParamBytes(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamBytesMethodRequest* /*request*/, ::Tests::TestTypesTestParamBytesMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InvokeTestParamBytes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InvokeTestParamBytes(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestParamDouble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestParamDouble() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::TestTypesTestParamDoubleMethodRequest, ::Tests::TestTypesTestParamDoubleMethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestParamDouble<BaseClass>::StreamedInvokeTestParamDouble, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestParamDouble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestParamDouble(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamDoubleMethodRequest* /*request*/, ::Tests::TestTypesTestParamDoubleMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestParamDouble(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::TestTypesTestParamDoubleMethodRequest,::Tests::TestTypesTestParamDoubleMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestParamFloat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestParamFloat() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::TestTypesTestParamFloatMethodRequest, ::Tests::TestTypesTestParamFloatMethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestParamFloat<BaseClass>::StreamedInvokeTestParamFloat, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestParamFloat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestParamFloat(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamFloatMethodRequest* /*request*/, ::Tests::TestTypesTestParamFloatMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestParamFloat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::TestTypesTestParamFloatMethodRequest,::Tests::TestTypesTestParamFloatMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestParamInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestParamInt() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::TestTypesTestParamIntMethodRequest, ::Tests::TestTypesTestParamIntMethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestParamInt<BaseClass>::StreamedInvokeTestParamInt, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestParamInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestParamInt(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamIntMethodRequest* /*request*/, ::Tests::TestTypesTestParamIntMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestParamInt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::TestTypesTestParamIntMethodRequest,::Tests::TestTypesTestParamIntMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestParamUInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestParamUInt() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::TestTypesTestParamUIntMethodRequest, ::Tests::TestTypesTestParamUIntMethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestParamUInt<BaseClass>::StreamedInvokeTestParamUInt, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestParamUInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestParamUInt(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamUIntMethodRequest* /*request*/, ::Tests::TestTypesTestParamUIntMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestParamUInt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::TestTypesTestParamUIntMethodRequest,::Tests::TestTypesTestParamUIntMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestParamLong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestParamLong() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::TestTypesTestParamLongMethodRequest, ::Tests::TestTypesTestParamLongMethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestParamLong<BaseClass>::StreamedInvokeTestParamLong, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestParamLong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestParamLong(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamLongMethodRequest* /*request*/, ::Tests::TestTypesTestParamLongMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestParamLong(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::TestTypesTestParamLongMethodRequest,::Tests::TestTypesTestParamLongMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestParamULong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestParamULong() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::TestTypesTestParamULongMethodRequest, ::Tests::TestTypesTestParamULongMethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestParamULong<BaseClass>::StreamedInvokeTestParamULong, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestParamULong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestParamULong(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamULongMethodRequest* /*request*/, ::Tests::TestTypesTestParamULongMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestParamULong(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::TestTypesTestParamULongMethodRequest,::Tests::TestTypesTestParamULongMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestParamBool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestParamBool() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::TestTypesTestParamBoolMethodRequest, ::Tests::TestTypesTestParamBoolMethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestParamBool<BaseClass>::StreamedInvokeTestParamBool, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestParamBool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestParamBool(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamBoolMethodRequest* /*request*/, ::Tests::TestTypesTestParamBoolMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestParamBool(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::TestTypesTestParamBoolMethodRequest,::Tests::TestTypesTestParamBoolMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestParamString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestParamString() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::TestTypesTestParamStringMethodRequest, ::Tests::TestTypesTestParamStringMethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestParamString<BaseClass>::StreamedInvokeTestParamString, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestParamString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestParamString(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamStringMethodRequest* /*request*/, ::Tests::TestTypesTestParamStringMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestParamString(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::TestTypesTestParamStringMethodRequest,::Tests::TestTypesTestParamStringMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestParamByte : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestParamByte() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::TestTypesTestParamByteMethodRequest, ::Tests::TestTypesTestParamByteMethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestParamByte<BaseClass>::StreamedInvokeTestParamByte, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestParamByte() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestParamByte(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamByteMethodRequest* /*request*/, ::Tests::TestTypesTestParamByteMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestParamByte(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::TestTypesTestParamByteMethodRequest,::Tests::TestTypesTestParamByteMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvokeTestParamBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InvokeTestParamBytes() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::Tests::TestTypesTestParamBytesMethodRequest, ::Tests::TestTypesTestParamBytesMethodResponse>(std::bind(&WithStreamedUnaryMethod_InvokeTestParamBytes<BaseClass>::StreamedInvokeTestParamBytes, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvokeTestParamBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvokeTestParamBytes(::grpc::ServerContext* /*context*/, const ::Tests::TestTypesTestParamBytesMethodRequest* /*request*/, ::Tests::TestTypesTestParamBytesMethodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvokeTestParamBytes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Tests::TestTypesTestParamBytesMethodRequest,::Tests::TestTypesTestParamBytesMethodResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_InvokeTestParamDouble<WithStreamedUnaryMethod_InvokeTestParamFloat<WithStreamedUnaryMethod_InvokeTestParamInt<WithStreamedUnaryMethod_InvokeTestParamUInt<WithStreamedUnaryMethod_InvokeTestParamLong<WithStreamedUnaryMethod_InvokeTestParamULong<WithStreamedUnaryMethod_InvokeTestParamBool<WithStreamedUnaryMethod_InvokeTestParamString<WithStreamedUnaryMethod_InvokeTestParamByte<WithStreamedUnaryMethod_InvokeTestParamBytes<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_InvokeTestParamDouble<WithStreamedUnaryMethod_InvokeTestParamFloat<WithStreamedUnaryMethod_InvokeTestParamInt<WithStreamedUnaryMethod_InvokeTestParamUInt<WithStreamedUnaryMethod_InvokeTestParamLong<WithStreamedUnaryMethod_InvokeTestParamULong<WithStreamedUnaryMethod_InvokeTestParamBool<WithStreamedUnaryMethod_InvokeTestParamString<WithStreamedUnaryMethod_InvokeTestParamByte<WithStreamedUnaryMethod_InvokeTestParamBytes<Service > > > > > > > > > > StreamedService;
};

}  // namespace Tests


#endif  // GRPC_gen_2eproto__INCLUDED
